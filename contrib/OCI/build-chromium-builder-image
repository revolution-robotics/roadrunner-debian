#!/usr/bin/env bash
#
# @(#) revo-make-kernel
#
# Copyright Â© 2021 Revolution Robotics, Inc.
#
: ${AWK:='/usr/bin/gawk'}
: ${BUILDAH:='/usr/bin/buildah'}
: ${CAT:='/bin/cat'}
: ${CHMOD:='/bin/chmod'}
: ${CHROOT:='/usr/sbin/chroot'}
: ${CP:='/bin/cp'}
: ${DF:='/bin/df'}
: ${FINDMNT:='/bin/findmnt'}
: ${GIT:='/usr/bin/git'}
: ${HEAD:='/usr/bin/head'}
: ${INSTALL:='/usr/bin/install'}
: ${IP:='/bin/ip'}
: ${JQ:='/usr/bin/jq'}
: ${MKDIR:='/bin/mkdir'}
: ${MOUNT:='/bin/mount'}
: ${MV:='/bin/mv'}
: ${NMCLI:='/usr/bin/nmcli'}
: ${PODMAN:='/usr/bin/podman'}
: ${READLINK:='/bin/readlink'}
: ${RM:='/bin/rm'}
: ${SED:='/bin/sed'}
: ${SLEEP:='/bin/sleep'}
: ${SOPS:="${HOME}/.asdf/shims/sops"}
: ${SUDO:='/usr/bin/sudo'}
: ${SYSTEMCTL:='/bin/systemctl'}
: ${TAR:='/bin/tar'}
: ${TEE:='/usr/bin/tee'}
: ${TOUCH:='/bin/touch'}
: ${UMOUNT:='/bin/umount'}
: ${ZFS:='/sbin/zfs'}

pr-info ()
{
    printf "I: %s\n" "$@" >&2
}

pr-err ()
{
    printf "I: %s\n" "$@" >&2
}

load-configuration ()
{
    local config_file=$1
    local line

    while read line; do

        # If line neither empty nor a comment...
        if [[ ! ."$line" =~ ^\.[[:space:]]*$ \
                  && ! ."$line" =~ ^\.[[:space:]]*# ]]; then

            # Split line on equals sign (=)...
            set --; set -- $(awk -F'=' '{ print $1, $2 }' <<<"$line")

            # If first arg is legal bash variable name...
            if [[ ."$1" =~ ^\.[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then

                # If right side contains quotes...
                if [[ "${@:2}" =~ (\"|\') ]]; then
                    eval $1="${@:2}"
                else
                    eval $1=\""${@:2}"\"
                fi
            fi
        fi
    done <"$config_file"
}

enable-qemu-arm ()
{
    local qemu_arm=/proc/sys/fs/binfmt_misc/qemu-arm

    if ! $SUDO $SYSTEMCTL enable --now binfmt-support &>/dev/null; then
        pr-err "${script_name}: binfmt-support not available"
        return 1
    elif test ! -f "$qemu_arm" -o ."$($HEAD -1 $qemu_arm)" != .'enabled'; then
        pr-err "${script_name}: qemu-arm: QEMU ARM interpreter not available"
        return 2
    fi
}

get-external-ip ()
{
    local gateway_device=$(
        $IP route |
            $AWK '/^default/ { print gensub(/^.* dev ([^ ]+) .*$/, "\\1", 1) }'
          )
    local ipv4_address=$(
        $NMCLI -t --fields ip4.address d show "$gateway_device" |
            $AWK '{ print gensub(/.*:([^/]+)\/.*/, "\\1", 1) }'
          )

    echo "$ipv4_address"
}

get-secret ()
{
    local key=$1

    local toplevel_dir=$($GIT -C "$script_dir" rev-parse --show-toplevel)

    $SOPS exec-env "${toplevel_dir}/config/secrets.enc.json" "echo \$$key"
}

umount-fs ()
{
    local mount_point=$1
    local fs

    for fs in dev/pts dev proc sys ; do
        if $FINDMNT "${mount_point}/${fs}" >/dev/null; then
            $SUDO $UMOUNT -f "${mount_point}/${fs}" 2>/dev/null
        fi
    done
}

mount-fs ()
{
    local mount_point=$1

    $SUDO $INSTALL -d -m 0755 -o root -g root "${mount_point}"
    $SUDO $INSTALL -d -m 0555 -o root -g root "${mount_point}"/{dev,proc,sys}
    $SUDO $INSTALL -d -m 0755 -o root -g root "${mount_point}/dev/pts"

    if ! $FINDMNT "${mount_point}/proc" >/dev/null; then
        $SUDO $MOUNT -t proc /proc "${mount_point}/proc"
    fi

    for fs in /sys /dev /dev/pts; do
        if ! $FINDMNT "${mount_point}${fs}" >/dev/null; then
            $SUDO $MOUNT -o bind "$fs" "${mount_point}${fs}"
        fi
    done
}

build-builder ()
{
    local image=$1
    local tag=$2
    local name=$3
    local build_script=$4
    # local kernel_version=$5

    local old_image_id=$($SUDO $BUILDAH images --filter=reference="localhost/${name}" --format="{{.ID}}" 2>/dev/null)

    if test ."$old_image_id" != .''; then
        pr-info "Removing old image: localhost/${name}"
        $SUDO $BUILDAH rmi "$old_image_id" || return $?
    fi

    if ! $SUDO $BUILDAH images "localhost/${name}" &>/dev/null; then
        pr-info "Pulling container image: ${image}:${tag}"

        local container
        local mount_point

        container=$($SUDO $BUILDAH from "${image}:${tag}") || return $?
        mount_point=$($SUDO $BUILDAH mount "$container") || return $?

        if test -f "${mount_point}/etc/hosts"; then
            $SUDO $CP -a "${mount_point}/etc/hosts"{,~}
        else
            $SUDO $TOUCH  "${mount_point}/etc/hosts~"
        fi

        if test -f "${mount_point}/etc/resolv.conf"; then
            $SUDO $CP -a "${mount_point}/etc/resolv.conf"{,~}
        else
            $SUDO $TOUCH  "${mount_point}/etc/resolv.conf~"
        fi

        $SUDO $INSTALL -m 0644 /etc/hosts "${mount_point}/etc"
        $SUDO $INSTALL -m 0644 /etc/resolv.conf "${mount_point}/etc"

        $SUDO $TEE "${mount_point}/install_prerequisites" >/dev/null <<EOF
#!/bin/bash
#
# @(#) install_prerequisites
#
: \${HOST_GW_IPV4:=$(get-external-ip)}
EOF

        $SUDO $TEE -a "${mount_point}/install_prerequisites" >/dev/null <<'EOS'

install-prerequisites ()
{
    local policy=/usr/sbin/policy-rc.d
    local proxy=/etc/apt.conf.d/10acng-proxy

    trap 'rm -f "$policy"' 0 1 2 15 RETURN

    cat >"$policy" <<EOF
#!/bin/sh
exit 101
EOF
    chmod 0755 "$policy"

    apt update
    apt -qy install curl gawk iproute2
    apt -qy remove --purge mawk

    if test ."$HOST_GW_IPV4" != .'' &&
            curl "${HOST_GW_IPV4}:3142" &>/dev/null; then
        cat >"$proxy" <<EOF
Acquire::http::Proxy "http://${HOST_GW_IPV4}:3142";
EOF
    fi

    DEBIAN_FRONTEND=noninteractive apt -qy install apache2 apache2-bin        \
apache2-data apache2-utils apparmor autoconf automake autopoint bc            \
binfmt-support binutils binutils-aarch64-linux-gnu                            \
binutils-mips64el-linux-gnuabi64 binutils-mipsel-linux-gnu bison              \
build-essential bzip2 cdbs cmake coreutils curl dbus-x11 debootstrap          \
device-tree-compiler devscripts dpkg-dev ed elfutils fakeroot flex g++        \
gcc gir1.2-gudev-1.0 git git-core golang gperf gpg groff gzip help2man        \
kmod krb5-locales libapache2-mod-php7.4 libappindicator3-1                    \
libappindicator3-dev libaprutil1-dbd-sqlite3 libaprutil1-ldap                 \
libargon2-1 libasound2 libasound2-dev libatk1.0-0 libatspi2.0-0               \
libatspi2.0-dev libbluetooth3 libbluetooth-dev libbrlapi-dev                  \
libbz2-dev libc6 libc6-dev libcairo2 libcairo2-dev libcap2 libcap-dev         \
libcryptsetup12 libcups2 libcups2-dev libcurl4-gnutls-dev libdrm2             \
libdrm-dev libelf-dev libevdev2 libevdev-dev libexpat1 libffi-dev             \
libfontconfig1 libfreetype6 libfuse2 libgbm1 libgbm-dev libglib2.0-0          \
libglib2.0-dev libglu1-mesa-dev libgtk-3-0 libgtk-3-dev libgudev-1.0-0        \
libgudev-1.0-dev libinput10 libinput-bin libinput-dev libip4tc2               \
libjansson4 libjson-c5 libkrb5-dev libmtdev1 libmtdev-dev                     \
libncurses-dev libnspr4-dev libnss3-dev libpam0g libpam0g-dev                 \
libpango-1.0-0 libpci3 libpci-dev libpcre3 libpixman-1-0 libpulse-dev         \
libsctp-dev libsodium23 libspeechd2 libspeechd-dev libsqlite3-0               \
libsqlite3-dev libssl-dev libstdc++6 libtool libudev-dev libuuid1             \
libva-dev libvulkan-dev libwacom2 libwacom-bin libwacom-common                \
libwacom-dev libwayland-egl1-mesa libwww-perl libx11-6 libx11-xcb1            \
libxau6 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxdmcp6              \
libxext6 libxfixes3 libxi6 libxinerama1 libxrandr2 libxrender1                \
libxshmfence-dev libxslt1-dev libxss-dev libxt-dev libxtst6                   \
libxtst-dev locales lzop m4 make mesa-common-dev networkd-dispatcher          \
openbox p7zip parted patch perl php7.4-cgi php7.4-cli php7.4-common           \
php7.4-json php7.4-opcache php7.4-readline php-common pkg-config              \
psmisc python python3-dbus python3-gi python-dev python-setuptools            \
qemu qemu-user-static rpm rsync ruby snapd squashfs-tools ssl-cert            \
subversion sudo systemd systemd-timesyncd tzdata u-boot-tools udev            \
unzip upx-ucl uuid-dev vim wdiff x11-utils xcompmgr xz-utils zip              \
zlib1g

    apt -qy install binutils-arm-linux-gnueabihf
    apt -qy install cpp-arm-linux-gnueabihf
    apt -qy install g++-10-multilib-arm-linux-gnueabihf
    apt -qy install gcc-10-multilib-arm-linux-gnueabihf
    apt -qy install g++-arm-linux-gnueabihf
    apt -qy install gcc-arm-linux-gnueabihf
    apt -qy install g++-10-arm-linux-gnueabihf
    apt -qy install gcc-10-arm-linux-gnueabihf

    curl -sLo /usr/bin/install-smallstep \
         "https://raw.githubusercontent.com/revolution-robotics/roadrunner-debian/debian_bullseye_rr01/revo/resources/smallstep/install-smallstep"
    chmod +x /usr/bin/install-smallstep
    install-smallstep

    curl -sL https://ftp-master.debian.org/keys/release-11.asc |
        gpg --import --no-default-keyring \
             --keyring /usr/share/keyrings/debian-bullseye-release.gpg

    rm -f "$policy" "$proxy"
    trap - 0 1 2 15 RETURN
}

install-prerequisites
EOS

        $SUDO $CHMOD 0755 "$mount_point/install_prerequisites" || return $?

        trap 'umount-fs "$mount_point"; exit' 0 1 2 15

        mount-fs "$mount_point"

        pr-info "Installing builder prerequisites..."

        $SUDO $CHROOT "$mount_point" ./install_prerequisites >&2
        $SUDO $RM -f "${mount_point}/install_prerequisites"

        umount-fs "$mount_point"

        trap - 0 1 2 15

        # $SED -e "s;@BUILD_DIR@;$build_dir;" \
        #      -e "s;@BRANCH@;$branch;" \
        #      -e "s;@DEFCONFIG@;$defconfig;" \
        #      -e "s;@IMAGE_TYPE@;$image_type;" \
        #      -e "s;@VM_NAME@;$vm_name;" \
        #      -e "s;@DTBS@;$dtbs;" \
        #      -e "s;@ROOT_FILESYSTEM@;$root_filesystem;" \
        #      "${vendor_path}/resources/${build_script}-${kernel_version}" |
        #     $SUDO $TEE "${mount_point}/root/${build_script}" >/dev/null
        # $SUDO $CHMOD 0755 "${mount_point}/root/${build_script}"
        $SED -e "s;@GW_IPV4@;$(get-external-ip);"  \
            -e "s;@CA_URL@;$(get-secret CA_URL);" \
            -e "s;@CA_FINGERPRINT@;$(get-secret CA_FINGERPRINT);" \
            "$build_script" |
            $SUDO tee "${mount_point}/root/${build_script##*/}" >/dev/null
        $SUDO $CHMOD 0755 "${mount_point}/root/${build_script}"
        # $SUDO $INSTALL -m 0755 \
        #       "${vendor_path}/resources/${build_script}-${kernel_version}" \
        #       "${mount_point}/root/${build_script}" >&2

        $SUDO $BUILDAH unmount "$container" >&2
        $SUDO $BUILDAH config --cmd "/root/${build_script}" \
             --label name="$name" "$container" >&2
        $SUDO $BUILDAH commit "$container" "$name" >&2
        sync
        sync
        $SLEEP 10
        $SUDO $BUILDAH rm "$container" >&2
    fi

    $SUDO $BUILDAH images --filter=reference="localhost/${name}" --format="{{.ID}}"
    # $SUDO $BUILDAH inspect "localhost/${name}" |
    #     $JQ -r '.FromImageID'
}

reset-window-title ()
{
    printf "\e]0;$USER@$HOSTNAME\a"
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=$(readlink -e "$0")
    declare machine=${1:-'revo-roadrunner-mx7'}
    declare distribution=${2:-'ubuntu'}


    declare script_name=${script##*/}
    declare script_dir=${script%/*}
    declare vendor_path=${script_dir}/../../revo
    # declare external_src=${script_dir}/../../src

    # Load  variable definitions from ${machine}-${distribution}.conf.
    load-configuration "${vendor_path}/${machine}/${machine}-${distribution}.conf"
    enable-qemu-arm || exit $?

    declare builder_id

    builder_id=$(
        build-builder "$builder_image" "$builder_tag" "$builder_name" \
                      "$build_script" "$kernel_version"
              ) || exit $?

    if test ."$builder_id" = .''; then
        pr-err "${script_name}: Cannot build builder image"
        exit 2
    fi

    $CAT >&2 <<EOF
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
Builder image: ${builder_name}
Derived from: ${builder_image}:${builder_tag}
ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
EOF

    reset-window-title
fi
