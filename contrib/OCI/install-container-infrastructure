#!/usr/bin/env bash
#
# @(#) install-container-infrastructure
#
# Copyright Â© 2021 Revolution Robotics, Inc.
#
# This script builds and installs the latest podman, buildah, skopeo,
# umoci and friends for a Debian/Ubuntu system. Everything is
# installed under the /usr prefix, so `sudo' permissions are required.
#
# Before running this script, we recommend installing local copies of
# go, python, ruby and sphinx via package manager `asdf'. Otherwise,
# update the function `check-prerequisites' accordingly.
#
# Here's a sample script for installing the prerequisites via asdf:

#     #!/usr/bin/env bash
#     git clone https://github.com/asdf-vm/asdf.git ~/.asdf
#     source ~/.asdf/asdf.sh
#     for plugin in golang python ruby; do
#         asdf plugin add $plugin
#         latest=$(asdf latest $plugin)
#         asdf install $plugin $latest
#         asdf global $plugin $latest
#         asdf reshim $plugin
#     done
#     go install github.com/posener/complete/gocomplete@latest \
#         go.mozilla.org/sops/v3/cmd/sops@latest \
#         filippo.io/age/cmd/age@latest \
#         filippo.io/age/cmd/age-keygen@latest
#     asdf reshim golang
#     gem update --system
#     gem install fpm
#     asdf reshim ruby
#     pip install --upgrade pip
#     pip install -U wheel sphinx recommonmark sphinx_markdown_tables
#     asdf reshim python

# If using the above script, you'll want to add to ~/.bashrc
# something like:

#     export ASDF_DIR=${HOME}/.asdf \
#            SOPS_AGE_KEY_FILE="${HOME}/.config/sops/keys.txt"
#     if test -f "${ASDF_DIR}/asdf.sh"; then
#         source "${ASDF_DIR}/asdf.sh"
#         source "${ASDF_DIR}/completions/asdf.bash"
#     fi
#     if test -f "$SOPS_AGE_KEY_FILE"; then
#         export SOPS_AGE_RECIPIENTS=$(
#             sed -n -e '/.*public key: /s///p' "$SOPS_AGE_KEY_FILE"
#                )
#     fi
#     if command -v go &>/dev/null; then
#         complete -C gocomplete go
#         export GOPATH=$(go env GOPATH)
#     fi

#
# Finally, the BUILDTAGS variables should be adjusted as appropriate
# (https://podman.io/getting-started/installation).
#
set -x

check-prerequisites ()
{
    if ! type asdf >/dev/null 2>&1; then

        # asdf package manager not available...
        echo 'Please install package manager asdf (https://asdf-vm.com).'
        exit 1
    fi

    if test ."$(command -v go)" != ."${HOME}/.asdf/shims/go"; then

        # asdf golang not available...
        echo 'Please install a private copy of golang using package manager asdf.'
        exit 1
    fi

    export GOPATH=$(go env GOPATH)

    if test ."$(command -v gem)" != ."${HOME}/.asdf/shims/gem"; then

        # asdf ruby not available
        echo 'Please install a private copy of ruby using package manager asdf.'
        exit 1
    elif ! type fpm >/dev/null 2>&1; then
        gem install fpm
        asdf reshim ruby
    fi

    if test ."$(command -v python)" != ."${HOME}/.asdf/shims/python"; then

        # asdf python not available
        echo 'Please install a private copy of python using package manager asdf.'
        exit 1
    elif test ."$(command -v sphinx-build)" != ."${HOME}/.asdf/shims/sphinx-build"; then

        # asdf sphinx-build not available
        cat <<EOF
Please install a private copy of sphinx and friends:
    $ pip install -U sphinx recommonmark sphinx_markdown_tables
    $ asdf reshim python
EOF
        exit 1
    fi
}

install-dependencies ()
{
    sudo apt -y install \
         autoconf \
         automake \
         bats \
         bison \
         bpfcc-tools \
         btrfs-progs \
         build-essential \
         flex \
         fuse3 \
         fuse-overlayfs \
         gcc \
         git \
         go-md2man \
         libapparmor-dev \
         libassuan-dev \
         libbpfcc-dev \
         libbtrfs-dev \
         libc6-dev \
         libcap-dev \
         libdevmapper-dev \
         libglib2.0-dev \
         libgpgme-dev \
         libgpg-error-dev \
         libprotobuf-dev \
         libprotobuf-c-dev \
         libseccomp-dev \
         libselinux1-dev \
         libslirp-dev \
         libsystemd-dev \
         libtool \
         libxml2-dev \
         libyajl-dev \
         pkgconf \
         uidmap
}

## Install Red Hat containers-common config files
fetch-and-install-containers-common ()
{
    local baseurl=https://kojipkgs.fedoraproject.org//packages/containers-common/1
    local latest=$(
        curl -L "$baseurl" 2>/dev/null |
            awk '/^<img/ { print gensub(/.[^"]+"([^"]+)".*$/, "\\1", 1, $5) }' |
            sort -n |
            tail -1
            )
    local filename=containers-common-1-${latest%/}.src.rpm
    local rpmurl=${baseurl}/${latest%/}/src/${filename}

    sudo rm -rf "${workdir}/containers-common"
    install -d -m 0755 "${workdir}/containers-common"

    cd "${workdir}/containers-common"
    curl -LO "$rpmurl"

    local subdir=$(
        fpm -s rpm -t dir "$filename" |
            awk '{ print gensub(/^[^"]+"([^"]+)".*$/, "\\1", 1, $NF) }'
          )

    cd "./${subdir}"

    if test  -d /etc/containers; then
        sudo find /etc/containers -type f -exec mv {} {}.bak \;
    fi

    sudo install -d -m 0755 /etc/containers/{certs.d,registries.conf.d,registries.d}
    sudo install -m 0644 storage.conf registries.conf /etc/containers/
    sudo install -m 0644 default-policy.json /etc/containers/policy.json
    sudo install -m 0644 *.yaml /etc/containers/registries.d/
    sudo install -m 0644 shortnames.conf \
         /etc/containers/registries.conf.d/000-shortnames.conf

    sudo sed -i -e '/^driver =.*$/s//driver = "overlay"/' \
         -e '/^#?mount_program =.*$/s;;mount_program = "'${prefix}'/bin/fuse-overlayfs";' \
         /etc/containers/storage.conf

    if ! grep -q '^"/var/lib/shared",$' /etc/containers/storage.conf; then
        sudo sed -i -e '/additionalimage.*/a "/var/lib/shared",' \
             /etc/containers/storage.conf
    fi

    #fi

    if test -d "${prefix}/share/containers"; then
        sudo find "${prefix}/share/containers" -type f -exec mv {} {}.bak \;
    fi

    sudo install -d -m 0755 "${prefix}/share/rhel/secrets"
    sudo install -d -m 0755 "${prefix}/share/containers"/{selinux,oci/hooks.d}
    sudo install -m 0644 containers.conf mounts.conf \
         "${prefix}/share/containers/"
    sudo install -m 0644 seccomp.json "${prefix}/share/containers/"

    ## NB: Rootless containers use ${HOME}/.config/containers/containers.conf.

    sudo install -d -m 0755 /var/lib/containers/storage/{libpod,sigstore,volumes}
    sudo install -d -m 0755 /var/lib/shared/{overlay,vfs}-{images,layers}
    sudo touch /var/lib/shared/{overlay,vfs}-images/images.lock \
         /var/lib/shared/{overlay,vfs}-layers/layers.lock


    for md in *.md; do
        go-md2man <"$md" >"${md%.md}" 2>/dev/null
        gzip -f "${md%.md}"
        sudo install -m 0644 "${md%.md}.gz" "${prefix}/share/man/man5/"
    done
}


## Build and install rootless networking
fetch-and-install-slirp4netns ()
{
    if test -d "${workdir}/slirp4netns"; then
        git -C "${workdir}/slirp4netns" pull
    else
        git -C "$workdir" clone \
            https://github.com/rootless-containers/slirp4netns.git
    fi

    cd "${workdir}/slirp4netns"
    ./autogen.sh
    ./configure --prefix=${prefix}
    make
    sudo make install

    sudo sed -i -e '/^#?rootless_networking =.*/s;;rootless_networking = "slirp4netns";' \
         "${prefix}/share/containers/containers.conf"

    namespaces=$(sysctl user.max_user_namespaces | awk '{ print $NF }' )

    if (( namespaces < 28633 )); then
        sudo tee /etc/sysctl.d/10-userns.conf >/dev/null <<<'user.max_user_namespaces=28633'
        sudo sysctl -p /etc/sysctl.d/10-userns.conf
    fi
}


## Build and install container networking interface (CNI) plugins
fetch-and-install-cni-plugins ()
{
    if test -d "${workdir}/cni-plugins"; then
        git -C "${workdir}/cni-plugins" pull
    else
        git -C "$workdir" clone \
            https://github.com/containernetworking/plugins.git cni-plugins
    fi


    cd "${workdir}/cni-plugins"
    ./build_linux.sh
    sudo install -d -m 0755 "${prefix}/libexec/cni"
    sudo install -m 0755 ./bin/* "${prefix}/libexec/cni/"

    sudo sed -i -e '/^#?cni_plugin_dirs =.*$/s;;cni_plugins_dirs = ["'${prefix}'/libexec/cni"];' \
         -e '/^#?network_config_dir =.*/s;;network_config_dir = "/etc/cni/net.d/";' \
         "${prefix}/share/containers/containers.conf"
}

## Build and install CNI plugin dnsname
fetch-and-install-cni-plugin-dnsname ()
{
    if test -d "${workdir}/dnsname"; then
        git -C "${workdir}/dnsname" pull
    else
        git -C "$workdir" clone \
            https://github.com/containers/dnsname.git
    fi

    cd "${workdir}/dnsname"
    make
    sudo install  -d -m 755 "${prefix}/libexec/cni"
    sudo install -m 0755 ./bin/dnsname "${prefix}/libexec/cni/"

    # Grant dnsmasq read/write authorization of CNI runtime files.
    sudo install -d -m 0755 /etc/apparmor.d/local/
    sudo tee /etc/apparmor.d/local/usr.sbin.dnsmasq >/dev/null <<EOF
/usr/sbin/dnsmasq {
  # required by the dnsname plugin in podman
  /run/containers/cni/dnsname/*/dnsmasq.conf r,
  /run/containers/cni/dnsname/*/addnhosts r,
  /run/containers/cni/dnsname/*/pidfile rw,
}
EOF

    if type aa-enabled >/dev/null 2>&1 && test ."$(aa-enabled)" = .'Yes'; then
        sudo apparmor_parser -R /etc/apparmor.d/local/usr.sbin.dnsmasq
        sudo apparmor_parser /etc/apparmor.d/local/usr.sbin.dnsmasq
    fi
}

## Build and install CNI plugin podman-machine
fetch-and-install-cni-plugin-podman-machine ()
{
    if test -d "${workdir}/podman-machine"; then
        git -C "${workdir}/podman-machine" pull
    else
        git -C "$workdir" clone \
            https://github.com/containers/podman-machine-cni.git \
            "${workdir}/podman-machine"
    fi

    cd "${workdir}/podman-machine"
    make binaries
    sudo install -m 0755 ./bin/podman-machine \
         "${prefix}/libexec/cni/podman-machine"
}

## Build and install CNI plugin utility cnitool
fetch-and-install-cnitool ()
{
    if test -d "${workdir}/cni"; then
        git -C "${workdir}/cni" pull
    else
        git -C "$workdir" clone \
            https://github.com/containernetworking/cni.git
    fi

    cd "${workdir}/cni/cnitool"
    go build
    sudo install -m 0755 cnitool "${prefix}/bin/"

    cd ../Documentation
    go-md2man <cnitool.md >cnitool.1
    gzip -f cnitool.1
    sudo install -m 0644 cnitool.1.gz "${prefix}/share/man/man1/"
}

## Build and install crun
fetch-and-install-crun ()
{
    if test -d "${workdir}/crun"; then
        git -C "${workdir}/crun" pull
    else
        git -C "$workdir" clone https://github.com/containers/crun.git
    fi

    cd "${workdir}/crun"
    ./autogen.sh
    ./configure --prefix=${prefix}
    make
    sudo make install
}

## Build and install runc
fetch-and-install-runc ()
{
    if test -d "${workdir}/runc"; then
        git -C "${workdir}/runc" pull
    else
        git -C "$workdir" clone https://github.com/opencontainers/runc.git
    fi

    cd "${workdir}/runc"
    make all man BUILDTAGS="seccomp"

    # sudo make install install-man install-bash PREFIX=${prefix}
    sudo install -m 0755 runc "${prefix}/sbin/"

    local manpage

    cd ./man/man8
    for manpage in *.8; do
        gzip -f "$manpage"
        sudo install -m 0644 "${manpage}.gz" "${prefix}/share/man/man8/"
    done
}

## Build and install conmon
fetch-and-install-conmon ()
{
    if test -d "${workdir}/conmon"; then
        git -C "${workdir}/conmon" pull
    else
        git -C "$workdir" clone https://github.com/containers/conmon.git
    fi

    cd "${workdir}/conmon"
    make all docs

    sudo make install.bin PREFIX=${prefix}

    ## To overwrite podman's conmon:
    sudo make install.podman  PREFIX=${prefix}

    ## To overwrite CRI-O's conmon:
    sudo make install.crio  PREFIX=${prefix}

    sudo make -C docs install PREFIX=${prefix}
}

## Build and install podman
fetch-and-install-podman ()
{
    if test -d "${workdir}/podman"; then
        git -C "${workdir}/podman" pull
    else
        git -C "$workdir" clone https://github.com/containers/podman.git
    fi

    cd "${workdir}/podman"
    # BUILDTAGS:
    #   apparmor
    #   exclude_graphdriver_btrfs
    #   exclude_graphdriver_devicemapper
    #   libdm_no_deferred_remove
    #   seccomp
    #   selinux
    #   systemd
    make BUILDTAGS="apparmor seccomp selinux systemd exclude_graphdriver_devicemapper" GOMD2MAN=/usr/bin/go-md2man
    sudo install  -m 755 ./bin/podman "${prefix}/bin/"

    if false; then
        sudo chcon --verbose --reference=${prefix}/bin/podman bin/podman
    fi

    sudo install  -m 755 -d "${prefix}/lib/tmpfiles.d"
    sudo install  -m 644 ./contrib/tmpfile/podman.conf \
         "${prefix}/lib/tmpfiles.d/"
    sudo install  -m 755 ./bin/podman-remote "${prefix}/bin/"

    if false; then
        sudo chcon --verbose --reference=${prefix}/bin/podman-remote \
             bin/podman-remote
    fi

    sudo install -d -m 755 "${prefix}/lib/systemd/system"
    sudo install -d -m 755 "${prefix}/lib/systemd/user"

    # User services
    sudo install  -m 644 \
         ./contrib/systemd/auto-update/podman-auto-update.service \
         ./contrib/systemd/auto-update/podman-auto-update.timer \
         ./contrib/systemd/user/podman.socket \
         ./contrib/systemd/user/podman.service \
         ./contrib/systemd/user/podman-restart.service \
         "${prefix}/lib/systemd/user/"

    # System services
    sudo install -m 644 \
         ./contrib/systemd/auto-update/podman-auto-update.service \
         ./contrib/systemd/auto-update/podman-auto-update.timer \
         ./contrib/systemd/system/podman.socket \
         ./contrib/systemd/system/podman.service \
         ./contrib/systemd/system/podman-restart.service \
         "${prefix}/lib/systemd/system/"

    sudo install -m 0755 ./docker "${prefix}/bin"
    sudo install -m 0644 ./completions/bash/podman \
         "${prefix}/share/bash-completion/completions/"
    sudo install -m 0644 ./completions/zsh/_podman \
         "${prefix}/share/zsh/vendor-completions/"

    local manpage

    cd ./docs/build/man
    for manpage in *.1; do
        gzip -f "$manpage"
        sudo install -m 0644 "${manpage}.gz" "${prefix}/share/man/man1/"
    done

    # Silence podman's docker emaulation.
    sudo touch /etc/containers/nodocker
}

## Build and install buildah
fetch-and-install-buildah ()
{
    if test -d "${workdir}/buildah"; then
        git -C "${workdir}/buildah" pull
    else
        git -C "$workdir" clone https://github.com/containers/buildah.git
    fi

    cd "${workdir}/buildah"
    make SECURITYTAGS="apparmor seccomp" bin/buildah bin/imgtype bin/copy
    make -C docs GOMD2MAN=go-md2man
    sudo install -m 0755 ./bin/buildah "${prefix}/bin/"
    # sudo install -m 0755 bin/copy bin/imgtype "${prefix}/bin/"
    sudo install -d -m 0755 /etc/cni/net.d
    sudo install -m 0644 ./docs/cni-examples/100-buildah-bridge.conf \
         /etc/cni/net.d
    sudo install -m 0644 ./contrib/completions/bash/buildah \
         "${prefix}/share/bash-completion/completions/"

    local manpage

    cd ./docs
    for manpage in *.1; do
        gzip -f "$manpage"
        sudo install -m 0644 "${manpage}.gz" "${prefix}/share/man/man1/"
    done
}

## Build and install skopeo
fetch-and-install-skopeo ()
{
    if test -d "${workdir}/skopeo"; then
        git -C "${workdir}/skopeo" pull
    else
        git -C "$workdir" clone https://github.com/containers/skopeo.git
    fi

    cd "${workdir}/skopeo"
    make all
    sudo install -m 0755 bin/skopeo "${prefix}/bin/"
    sudo install -m 0644 completions/bash/skopeo \
         "${prefix}/share/bash-completion/completions/"

    local manpage

    cd ./docs
    for manpage in *.1; do
        gzip -f "$manpage"
        sudo install -m 0644 "${manpage}.gz" "${prefix}/share/man/man1/"
    done
}

# Build and install umoci
fetch-and-install-umoci ()
{
    if test -d "${workdir}/umoci"; then
        git -C "${workdir}/umoci" pull
    else
        git -C "$workdir" clone https://github.com/opencontainers/umoci.git
    fi

    cd "${workdir}/umoci"
    make umoci docs
    sudo install -m 0755 umoci "${prefix}/bin/"

    local manpage

    cd ./doc/man
    for manpage in *.1; do
        gzip -f "$manpage"
        sudo install -m 0644 "${manpage}.gz" "${prefix}/share/man/man1/"
    done
}

## Install cilium
fetch-and-install-cilium ()
{
    if test -d "${workdir}/cilium"; then
        git -C "${workdir}/cilium" pull
    else
        git -C "$workdir" clone https://github.com/cilium/cilium.git
    fi

    cd "${workdir}/cilium"
    make all RUNDIR=/run CNIBINDIR=${prefix}/libexec/cni CONTAINER_ENGINE=podman
    sudo make install RUNDIR=/run CNIBINDIR=${prefix}/libexec/cni CONTAINER_ENGINE=podman
    sudo make install-bash-completion
}

## Build and install OCI-SECCOMP-BPF-hook
fetch-and-install-oci-seccomp-bpf-hook ()
{
    if test -d "${workdir}/oci-seccomp-bpf-hook"; then
        git -C "${workdir}/oci-seccomp-bpf-hook" pull
    else
        git -C "$workdir" clone \
            https://github.com/containers/oci-seccomp-bpf-hook.git
    fi

    cd "${workdir}/oci-seccomp-bpf-hook"
    make PREFIX=${prefix}
    sudo install  -d -m 755 "${prefix}/libexec/oci/hooks.d"
    sudo install  -d -m 755 "${prefix}/share/containers/oci/hooks.d"
    sudo install  -m 755 ./bin/oci-seccomp-bpf-hook \
         "${prefix}/libexec/oci/hooks.d/"
    sudo install  -m 755 ./oci-seccomp-bpf-hook.json \
         "${prefix}/share/containers/oci/hooks.d"
    sudo sed -i -e 's|HOOK_BIN_DIR|/usr/libexec/oci/hooks.d|g' \
         "${prefix}/share/containers/oci/hooks.d//oci-seccomp-bpf-hook.json"
}

## Udica for generating SELinux policies for containers
fetch-and-install-udica ()
{
    if test -d "${workdir}/udica"; then
        git -C "${workdir}/udica" pull
    else
        git -C "$workdir" clone \
            https://github.com/containers/udica.git
    fi

    cd "${workdir}/udica"
}

## Install /etc/cni/net.d config files.
add-cni-loopback-profile ()
{
    sudo tee /etc/cni/net.d/99-loopback.conf >/dev/null <<EOF
{
    "cniVersion": "0.2.0",
    "name": "lo",
    "type": "loopback"
}
EOF
}

## Enable unprivileged user namespaces.
enable-unprivileged-namespaces ()
{
    local status=$(
        sysctl kernel.unprivileged_userns_clone |
            awk '{ print $NF }'
          )

    if (( status != 1 )); then
        echo "kernel.unprivileged_userns_clone=1" |
            sudo tee /etc/sysctl.d/10-userns.conf >/dev/null
    fi
}

## Install Red Hat RPM signing keys.
# sudo install -d -m 0755 /etc/pki/rpm-gpg
# sudo curl -L -o /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release \
#      https://www.redhat.com/security/data/fd431d51.txt
# sudo curl -L -o /etc/pki/rpm-gpg/RPM-GPG-KEY-isv-release \
#      https://www.redhat.com/security/data/55A34A82.txt

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=$(readlink -e $0)
    declare script_name=${script##*/}
    declare workdir=${script%/*}/OCI
    declare prefix=/usr
    declare oldpwd=$PWD

    check-prerequisites
    install-dependencies
    install -d -m 0755 "$workdir"

    fetch-and-install-containers-common
    fetch-and-install-slirp4netns
    fetch-and-install-cni-plugins
    fetch-and-install-cni-plugin-dnsname
    fetch-and-install-cni-plugin-podman-machine
    fetch-and-install-cnitool
    fetch-and-install-crun
    fetch-and-install-runc
    fetch-and-install-conmon
    fetch-and-install-podman
    fetch-and-install-buildah
    fetch-and-install-skopeo
    fetch-and-install-umoci
    # fetch-and-install-cilium
    fetch-and-install-oci-seccomp-bpf-hook
    # fetch-and-install-udica
    add-cni-loopback-profile
    enable-unprivileged-namespaces
    sudo mandb

    cd "$oldpwd"
fi
