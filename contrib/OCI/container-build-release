#!/usr/bin/env bash
#
# @(#) container-build-release
#
# Copyright © 2021, 2022 Revolution Robotics, Inc.
#
declare script=$(readlink -e "$0")
declare script_dir=${script%/*}
declare script_name=${script##*/}

source "${script_dir}/build-builder-image"

create-external-volume ()
{
    local output_dir=$1
    local volume_name=$2

    local dest_dir=${output_dir}/${volume_name}

    pr-info "Populating external volume..."

    local fs_mount=$($DF "$output_dir" | $AWK 'NR > 1 { print $NF }')
    local fs_type=$($FINDMNT -n "$fs_mount" | $AWK '{ print $3 }')

    if test ."$fs_type"  = .'zfs'; then
        local dataset=$($DF "$output_dir" | $AWK 'NR > 1 { print $1 }')

        if ! $SUDO $ZFS create -p -o mountpoint="${dest_dir}" \
             "${dataset}/${volume_name}"; then
            pr-err "${script_name}: ${dest_dir}: Cannot create directory"
            return 1
        fi
    else
        if ! $SUDO $INSTALL -d "${dest_dir}"; then
            pr-err "${script_name}: ${dest_dir}: Cannot create directory"
            return 2
        fi
    fi

    echo "$dest_dir"
}

run-builder ()
{
    local builder_id=$1
    local dest_dir=$2
    local build_dir=$3

    if command -v aa-enabled >/dev/null &&
            test ."$(aa-enabled)" = .'Yes'; then

        pr-info "Running with:  apparmor=unconfined"

        $SUDO $PODMAN run -it --rm --privileged \
             --security-opt apparmor=unconfined \
             -v "${dest_dir}:${build_dir}:rshared,rbind,exec,dev,suid,rw" \
             "$builder_id"
    else

        pr-info "Running with:  privilege"

        $SUDO $PODMAN run -it --rm --privileged \
               -v "${dest_dir}:${build_dir}:rshared,rbind,exec,dev,suid,rw" \
               "$builder_id"
    fi

    # $SUDO $PODMAN rmi "$builder_id" &>/dev/null
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare client=${1:-'BW'}
    declare distribution=${2:-'debian'}
    declare machine=${3-'revo-roadrunner-mx7'}

    declare vendor_path=${script_dir}/../../revo

    # Load  variable definitions from ${machine}-${distribution}.conf.
    load-configuration "${vendor_path}/${machine}/${machine}-${distribution}.conf"
    enable-qemu-arm || exit $?

    declare builder_id

    builder_id=$(
        build-builder "$builder_name" "$builder_image" "$builder_tag" \
                      "$build_script" "$client"
            ) || exit $?

    if test ."$builder_id" = .''; then
        pr-err "${script_name}: Cannot build builder image"
        exit 2
    else
        pr-info "builder_id: $builder_id"
    fi

    declare volume_name=roadrunner-${kernel_version}_$(date -u +%Y%m%dT%H%M%SZ)

    declare dest_dir=$(create-external-volume "$output_dir" "$volume_name")


    $CAT >&2 <<EOF
════════════════════════════════════════════════════════════════════════════════
Client: ${client}
Builder image: ${builder_name}
Derived from: ${builder_image}:${builder_tag}
Destination: ${dest_dir}
────────────────────────────────────────────────────────────────────────────────
EOF
    read -p 'Press any key to continue...'

    run-builder "$builder_id" "$dest_dir" "$build_dir"
    reset-window-title
fi
