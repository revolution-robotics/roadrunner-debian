#!/usr/bin/env bash
#
# @(#) install-reverse-tunnel-server
#
# SYNOPSIS
#     install-reverse-tunnel-infrastructure SERVER-OWNER
#
# DESCRIPTION
#     This script installs in the home directory of (existing) user SERVER-OWNER:
#        1) version manager `asdf' as necessary,
#        2) LTS nodejs via asdf version manager,
#        3) global npm package `reverse-tunnel-server',
#
# PREREQUISITES
#     jq
#
: ${AWK_CMD:='/usr/bin/awk'}
: ${BASH_CMD:='/bin/bash'}
: ${CHMOD_CMD:='/bin/chmod'}
: ${CHOWN_CMD:='/bin/chown'}
: ${CAT_CMD:='/bin/cat'}
: ${CURL_CMD:='/usr/bin/curl'}
: ${CUT_CMD:='/usr/bin/cut'}
: ${GETENT_CMD:='/usr/bin/getent'}
: ${GIT_CMD:='/usr/bin/git'}
: ${GREP_CMD:='/bin/grep'}
: ${ID_CMD:='/usr/bin/id'}
: ${JQ_CMD:='/usr/bin/jq'}
: ${LOGINCTL_CMD:='/usr/bin/loginctl'}
: ${MATCHPATHCON:='/usr/sbin/matchpathcon'}
: ${INSTALL_CMD:='/usr/bin/install'}
: ${READLINK_CMD:='/bin/readlink'}
: ${RESTORECON_CMD:='/usr/sbin/restorecon'}
: ${RM_CMD:='/bin/rm'}
: ${SED_CMD:='/bin/sed'}
: ${SEMANAGE_CMD:='/usr/sbin/semanage'}
: ${SCRIPT_CMD:='/usr/bin/script'}
: ${SORT_CMD:='/usr/bin/sort'}
: ${STAT_CMD:='/usr/bin/stat'}
: ${SUDO_CMD:='/usr/bin/sudo'}
: ${TAIL_CMD:='/usr/bin/tail'}
: ${TAR_CMD:='/bin/tar'}
: ${TOUCH_CMD:='/bin/touch'}

: ${LOCK_CMD:=''}

# OS-agnstoic readlink for existent files/directories.
resolve-existing ()
{
    if $READLINK_CMD --version 2>&1 | $GREP_CMD -q 'coreutils'; then
        $READLINK_CMD -e "$@"
    else
        $READLINK_CMD -f N "$@"
    fi
}

fetch-server ()
{
    local uri_prefix=$1
    local server_dir=$2
    local server_owner=$3
    local server_group=$4


    trap '$RM_CMD -f "${server_dir}/reverse-tunnel-server-latest.tgz"; exit 1' 0 1 2 15 RETURN

    $CURL_CMD -sSLo  "${server_dir}/reverse-tunnel-server-latest.tgz" \
              "${uri_prefix}/reverse-tunnel-server-latest.tgz" || return $?

    local latest=''

    latest=$(< "${server_dir}/reverse-tunnel-server-latest.tgz") || return $?

    trap '$RM_CMD -f "${server_dir}/reverse-tunnel-server-latest.tgz" \
         "${server_dir}/$latest"; exit 1' 0 1 2 15 RETURN

    $CURL_CMD -sSLo "${server_dir}/${latest}" "${uri_prefix}/${latest}" \
        || return $?

    trap '$RM_CMD -rf "${server_dir}/reverse-tunnel-server-latest.tgz" \
         "${server_dir}/$latest" \
         "${server_dir}/package"; exit 1' 0 1 2 15 RETURN

    $TAR_CMD -C "$server_dir" -zxf "${server_dir}/${latest}" \
        || return $?

    $CHOWN_CMD -R "$server_owner:$server_group" \
               "${server_dir}/reverse-tunnel-server-latest.tgz" \
               "${server_dir}/$latest" \
               "${server_dir}/package" || return $?

    trap - 0 1 2 15 RETURN
}

install-server-infrastructure ()
{
    local server_dir=$1
    local server_owner=$2
    local server_group=$3

    local latest=''

    latest=$(< "${server_dir}/reverse-tunnel-server-latest.tgz") || return $?

    local package_dir=${server_dir}/package

    trap '$RM_CMD -rf "${server_dir}/reverse-tunnel-server-latest.tgz" \
         "${server_dir}/$latest" \
         "$package_dir"; exit 1' 0 1 2 15 RETURN

    if test ! -f /etc/default/reverse-tunnel; then
        $INSTALL_CMD -d -m 0755 /etc/default
        $INSTALL_CMD -m 0644 "${package_dir}/config/reverse-tunnel"  \
                     /etc/default || return $?
    fi

    if test ! -f /usr/lib/systemd/user/reverse-tunnel@.service; then
        $INSTALL_CMD -d -m 0755 /usr/lib/systemd/user
        $INSTALL_CMD -m 0644 "${package_dir}/scripts/reverse-tunnel@.service"  \
                     /usr/lib/systemd/user || return $?
    fi

    local security_context=''
    local statedir=''

    statedir=$(
        $AWK_CMD  '/^API_STATE_DIR/ { print $NF }' /etc/default/reverse-tunnel
            ) || return $?

    $INSTALL_CMD -d -m 0755 -o "$server_owner" -g "$server_group" \
                 "${statedir}"/{certs,config} || return $?
    $INSTALL_CMD -d -m 0700 -o "$server_owner" -g "$server_group" \
                 "${statedir}/secrets" || return $?

    if command -v $SEMANAGE_CMD >/dev/null; then
        if ! $SEMANAGE_CMD fcontext -l | $GREP_CMD -q "${statedir}/secrets"; then
            $SEMANAGE_CMD fcontext -a -t ssh_home_t "${statedir}/secrets" || return $?
        fi

        $RESTORECON_CMD -R -v "${statedir}/secrets" || return $?
    fi

    # $LOGINCTL_CMD enable-linger "$server_owner"
    $TOUCH_CMD "/var/lib/systemd/linger/${server_owner}"
    $RM_CMD -rf "$package_dir" || return $?

    trap - 0 1 2 15 RETURN
}

maybe-install-asdf ()
{
    if test ."$ASDF_DIR" = .'' -a -d ~/.asdf; then
        export ASDF_DIR=~/.asdf
    fi

    if test -d "$ASDF_DIR"; then
        $GIT_CMD -C "$ASDF_DIR" pull
    else
        export ASDF_DIR=~/.asdf
        $GIT_CMD clone https://github.com/asdf-vm/asdf.git "$ASDF_DIR" || return $?
    fi
}

source-asdf ()
{
    if ! $GREP_CMD -q ASDF_DIR ~/.bashrc 2>/dev/null; then
        echo "Initializing asdf in bashrc..." >&2
        $CAT_CMD >>~/.bashrc <<'EOF'

# Initialize asdf version manager.
export ASDF_DIR=~/.asdf
if test -f "${ASDF_DIR}/asdf.sh"; then
    source "${ASDF_DIR}/asdf.sh"
    source "${ASDF_DIR}/completions/asdf.bash"
fi
EOF
    fi

    source "${ASDF_DIR}/asdf.sh"
}

install-asdf-nodejs ()
{
    local version=$1

    asdf install nodejs "$version" || return $?
    asdf global nodejs "$version" || return $?
    npm i -g npm || return $?
    asdf reshim nodejs || return $?
}

maybe-install-nodejs ()
{
    local node_base=$1

    local latest=''

    if ! asdf which node 2>/dev/null; then
        echo "Installing nodejs plugin" >&2
        asdf plugin add nodejs || return $?
        latest=$(asdf latest nodejs "$node_base") || return $?
        install-asdf-nodejs "$latest" || return $?
    else
        latest=$(asdf latest nodejs "$node_base") || return $?

        if test ."$(node --version)" != ."v${latest}"; then
            local existing_modules_string=''
            local -a existing_modules=()

            existing_modules_string=$(
                npm -g list |
                    $SED_CMD -En -e '/^├── ([^@]+)@.*/s//\1/p'
                                   ) || return $?
            mapfile -t existing_modules <<<"$existing_modules_string" || return $?

            echo "Installing node v${latest}.." >&2
            install-asdf-nodejs "$latest" || return $?

            if (( ${#existing_modules[*]} > 0 )); then
                npm i -g "${existing_modules[@]}" || return $?
                asdf reshim nodejs || return $?
            fi
        fi
    fi
}

install-reverse-tunnel-server ()
{
    local version=''
    local latest=''

    trap '$RM_CMD -f reverse-tunnel-server-latest.tgz "$latest"; exit 1' 0 1 2 15 RETURN

    latest=$(< reverse-tunnel-server-latest.tgz) || return $?
    NODE_ENV=production npm i -g "$latest" || return $?
    asdf reshim nodejs || return $?

    $RM_CMD -f reverse-tunnel-server-latest.tgz "$latest" || return $?
    $INSTALL_CMD -d -m 0700 ~/.ssh || return $?

    trap - 0 1 2 15 RETURN
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=''
    declare script_name=''
    declare toplevel_dir=''

    script=$(resolve-existing "$0") || exit $?
    script_name=${script##*/}
    script_dir=${script%/*}
    toplevel_dir=${script_dir%/*}

    declare server_owner=${1:-'revo'}
    declare node_base=${2:-'20'}

    declare server_group=''

    if [[ ."$server_owner" == .-* ]]; then
        echo "Usage: ${script_name} [SERVER-OWNER [NODE-BASE]]" >&2
        exit
    elif ! server_group=$($ID_CMD -gn "$server_owner" 2>/dev/null); then
        echo "${server_owner}: Server account must exist before running this script." >&2
        exit 1
    elif ! server_dir=$($GETENT_CMD passwd "$server_owner" | $CUT_CMD -d: -f6); then
        echo "${server_owner}: Home directory must exist before running this script." >&2
        exit 2
    elif test ."$LOCKED" != ."$0"; then
        if (( EUID != 0 )); then
            echo "${script_name}: Must be run by user root" >&2
            exit 3
        fi

        declare uri_base=https://raw.githubusercontent.com/revolution-robotics/roadrunner-debian
        declare uri_prefix=${uri_base}/debian_bullseye_rr01/revo/resources/reverse-tunnel-server

        fetch-server "$uri_prefix" "$server_dir" "$server_owner" \
                      "$server_group" || exit $?
        install-server-infrastructure "$server_dir" "$server_owner" \
                                      "$server_group"|| exit $?

        # Run remainder of script as user $server_owner.
        exec env LOCKED="$script" $SUDO_CMD -i -u "$server_owner" \
             --preserve-env=LOCKED "$script" "$@"

        # Not reached...
        exit 4
    fi

    maybe-install-asdf || exit $?
    source-asdf || exit $?
    maybe-install-nodejs "$node_base" || exit $?
    install-reverse-tunnel-server || exit $?
fi
