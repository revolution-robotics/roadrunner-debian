#!/usr/bin/env bash
#
# @(#) install-reverse-tunnel-server
#
# SYNOPSIS
#     install-reverse-tunnel-server [ca-url fingerprint]
#
# DESCRIPTION
#     This script installs in the home directory of user $NODE_USER:
#        1) version manager `asdf',
#        2) the latest version of nodejs in the $NODE_BASE series,
#        3) npm package `reverse-tunnel-server',
#     and finally, if a CA-URL and associated FINGERPRINT are
#     specified, the given certificate authority is bootstraped,
#     otherwise ca.revo.io is bootstraped.
#
# Edit these ...
: ${NODE_BASE:='@NODE_BASE@'}
: ${NODE_GROUP:='@NODE_GROUP@'}
: ${NODE_USER:='@NODE_USER@'}

# Command paths
: ${AWK:='/usr/bin/awk'}
: ${BASH:='/bin/bash'}
: ${CHMOD:='/bin/chmod'}
: ${CHOWN:='/bin/chown'}
: ${CAT:='/bin/cat'}
: ${CURL:='/usr/bin/curl'}
: ${CUT:='/usr/bin/cut'}
: ${GETENT:='/usr/bin/getent'}
: ${GIT:='/usr/bin/git'}
: ${GREP:='/bin/grep'}
: ${INSTALL:='/usr/bin/install'}
: ${READLINK:='/bin/readlink'}
: ${RM:='/bin/rm'}
: ${SED:='/bin/sed'}
: ${SCRIPT:='/usr/bin/script'}
: ${SORT:='/usr/bin/sort'}
: ${STEP_CLI:='/usr/bin/step'}
: ${SUDO:='/usr/bin/sudo'}
: ${TAIL:='/usr/bin/tail'}
: ${TAR:='/bin/tar'}

: ${LOCK:=''}

declare script=$($READLINK -e $0)

# deploy-remote-access-infrastructure Must be called by user `root'.
deploy-remote-access-infrastructure ()
{
    local uri_prefix=$1

    trap '$RM -f reverse-tunnel-server-latest.tgz; exit 1' 0 1 2 15 RETURN

    $CURL -sSLO "${uri_prefix}/reverse-tunnel-server-latest.tgz" \
        || return $?

    local latest=''
    local node_user_dir=''

    latest=$(< reverse-tunnel-server-latest.tgz) || return $?

    node_user_dir=$(
        $GETENT passwd "$NODE_USER" |
            $CUT -d: -f6
                ) || return $?

    $CHOWN "$NODE_USER:$NODE_USER" reverse-tunnel-server-latest.tgz \
        || return $?
    $INSTALL -m 0664 -o "$NODE_USER" -g "$NODE_USER" \
             reverse-tunnel-server-latest.tgz "${node_user_dir}" || return $?
    $RM -f reverse-tunnel-server-latest.tgz

    trap '$RM -f "${node_user_dir}/$latest"; exit 1' 0 1 2 15 RETURN

    $CURL -Lo "${node_user_dir}/${latest}" "${uri_prefix}/${latest}" \
        || return $?

    # Do not delete - see below.
    $CHOWN "$NODE_USER:$NODE_USER" "${node_user_dir}/$latest"

    $TAR -C "$node_user_dir" -zxf "${node_user_dir}/${latest}" \
        || return $?

    trap '$RM -rf "${node_user_dir}/package"; exit 1' 0 1 2 15 RETURN

    $INSTALL -m 0644 "${node_user_dir}/package/config/reverse-tunnel"  \
             /etc/default || return $?
    $INSTALL -m 0644 "${node_user_dir}/package/scripts/reverse-tunnel@.service"  \
             /lib/systemd/system || return $?
    $INSTALL -d -m 0755 ~/.ssh || return $?

    local statedir=''

    statedir=$(
        $AWK  '/^API_STATE_DIR/ { print $NF }' /etc/default/reverse-tunnel
            ) || return $?

    $INSTALL -d -m 0755 -o "$NODE_USER" -g "$NODE_GROUP" \
             "${statedir}"/{certs,config} || return $?
    $INSTALL -d -m 0700 -o "$NODE_USER" -g "$NODE_GROUP" \
             "${statedir}/secrets" || return $?

    $RM -rf "${node_user_dir}/package" || return $?

    trap - 0 1 2 15 RETURN
}

fetch-asdf ()
{
    if test -d ~/.asdf; then
        $GIT -C ~/.asdf pull
    else
        $GIT clone https://github.com/asdf-vm/asdf.git ~/.asdf || return $?
    fi
}

source-asdf ()
{
    source ~/.asdf/asdf.sh

    if ! $GREP -q ASDF_DIR ~/.bashrc; then
        echo "Appending to bashrc..."
        $CAT >>~/.bashrc <<'EOF'

# Initialize asdf version manager.
export ASDF_DIR=~/.asdf
if test -f "${ASDF_DIR}/asdf.sh"; then
    source "${ASDF_DIR}/asdf.sh"
    source "${ASDF_DIR}/completions/asdf.bash"
fi
EOF
    fi
}

install-node ()
{
    if command -v asdf >/dev/null 2>&1; then
        echo "Installing node..."
        asdf plugin add nodejs || return $?

        local node_lts=''

        node_lts=$(
            asdf latest nodejs "$NODE_BASE"
                ) || return $?

        asdf install nodejs "$node_lts" || return $?
        asdf global  nodejs "$node_lts" || return $?
        npm i -g npm || return $?
        asdf reshim nodejs || return $?
    fi
}

install-remote-access-server ()
{
    $INSTALL -d -m 0600 ~/.ssh || return $?

    if test ! -f ~/reverse-tunnel-server-latest.tgz; then
        return 1
    fi

    local latest=''

    latest=$(< ~/reverse-tunnel-server-latest.tgz) || return $?
    if test ! -f ~/"${latest}"; then
       return 2
    fi

    NODE_ENV=production npm i -g ~/"${latest}" || return $?
    asdf reshim nodejs || return $?

    $RM -f ~/reverse-tunnel-server-latest.tgz ~/"${latest}" || return $?
}

bootstrap-ca ()
{
    local ca_url=$1
    local fingerprint=$2

    $STEP_CLI ca bootstrap --ca-url "$ca_url" --fingerprint "$fingerprint" \
        || return $?
    $INSTALL -d -m 0700 ~/.step/secrets || return $?
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare ca_url=$1
    declare fingerprint=$2

    if test ."$LOCKED" != ."$script"; then
        if (( EUID != 0 )); then
            echo "${script##*/}: Must be run by user root" >&2
            exit 1
        fi

        declare uri_prefix=https://github.com/revolution-robotics/roadrunner-debian/raw/debian_bullseye_rr01/revo/resources/reverse-tunnel-server

        deploy-remote-access-infrastructure "$uri_prefix" || exit $?

        # Run remainder of script as user $NODE_USER.
        exec env LOCKED="$script" $SUDO -i -u "$NODE_USER" \
             --preserve-env=LOCKED "$script" "$@"

        # Not reached...
        exit 2
    fi

    fetch-asdf || exit $?
    source-asdf || exit $?
    install-node || exit $?
    install-remote-access-server || exit $?
    bootstrap-ca "$ca_url" "$fingerprint" || exit $?
fi
