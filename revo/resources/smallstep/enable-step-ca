#!/usr/bin/env bash
#
# @(#) install-step-ca
#
# This script installs Debian packages `step-cli' and
# `step-certificates' on Ubuntu x86_64. On both x86_64 and Arm
# architectures, step-ca is initialized.
#
# Exit immediately on error.
set -e -o pipefail

declare script_name=${0##*/}
declare script_dir=$(readlink -e "$0")

script_dir=${script_dir%/*}

: ${STEP_CLI:='/usr/bin/step'}
: ${STEP_CA:='/usr/bin/step-ca'}

if test ! -f /usr/lib/NetworkManager/ip-funcs; then
    cd /usr/lib/NetworkManager && {
        sudo curl -C - -LO https://raw.githubusercontent.com/revolution-robotics/roadrunner-debian/debian_buster_rr01/revo/resources/NetworkManager/usr/lib/NetworkManager/ip-funcs
        sudo chmod 644 ip-funcs
        cd -
    }
fi

source /usr/lib/NetworkManager/ip-funcs

usage ()
{
    local -n argv=$1

    cat <<EOF
Usage: $script_name OPTIONS
where OPTIONS are:
  -h|--help  Display help, then exit.
  -a|--address=IPADDR:PORT
             Set IP address of certificate authority web UI.
             (default: ${argv[address]})
  -f|--fqdn=HOSTNAME
             Set DNS host name of certificate authority.
             (default: ${argv[fqdn]})
  -g|--group-name=NAME
             Set group of certificate authority owner.
             (default: ${argv[groupname]})
  -l|--logdir=DIR
             Set logging directory of  certificate authority service.
             (default: ${argv[logdir]})
  -n|--name=CN
             Set common name of certificate authority (\`Root CA' is appended).
             (default: ${argv[name]})
  -p|--provisioner=NAME
             Set name of certificate authority JWK provisioner.
             (default: ${argv[provisioner]})
  -P|--password-file=PATHNAME
             Set name of file containing certificate authority password.
             (default: ${STEPPATH}/secrets/${argv[password_file]})
  -Q|--provisioner-password-file=PATHNAME
             Set name of file containing provisioner password.
             (default: ${STEPPATH}/secrets/${argv[provisioner_password_file]})
  -t|--template=PATHNAME
             Set name of certificate authority initialization template.
             (default: ${argv[template]})
  -u|--user-name=NAME
             Set name of certificate authority owner.
             (default: ${argv[username]})
EOF
}

# Return latest GIT repository tag of the form vX.Y.Z.
get-current-tag ()
{
    local uri=$1

    # GIT output format:
    #     f8bc862f1f40000864555374c08f59670f2cf6b9	refs/tags/v0.14.2
    #     3137b01136102d36f7631c0ecbd344bfe60090b3	refs/tags/v0.14.2-rc.1
    #     1b757d26aa177e1ad816b51f74cbfbdd5d69d73a	refs/tags/v0.14.3
    #     ea17bc44bce8630e93a997fd5de41d22a0fa061e	refs/tags/v0.14.4-rc.1
    #
    # After filtering and sorting:
    #     v0.14.2
    #     v0.14.3
    git ls-remote --tags "$uri" |
        grep -v -- '-rc[-.0-9]*' |
        sed 's;.*refs/tags/;;' |
        sort --version-sort -k1.2 |
        tail -1
}

fetch-and-install-step-pkg ()
{
    local uri=$1

    local pkg
    local tag=$(get-current-tag "$uri")
    local extension=${uri##*/}
    local machine=amd64

    if test ."$extension" = .'certificates'; then
        extension=-ca
    else
        extension=''
    fi

    if test ."$(uname --machine)" = .'armv7l'; then
        machine=armv7
    fi

    if test -f /etc/fedora-release -o -f /etc/centos-release; then
        pkg=step${extension}_linux_${tag#v}_${machine}.tar.gz
    else
        pkg=step${extension}_${tag#v}_${machine}.deb
    fi

    local tmpdir=$(mktemp -d "/tmp/${FUNCNAME[0]}.XXXXX")

    trap 'rm -rf "$tmpdir"; exit' 0 1 2 15

    cd "$tmpdir"
    curl -C - -LO "${uri}/releases/download/${tag}/${pkg}"

    if test -f /etc/fedora-release -o -f /etc/centos-release; then
        tar --strip-components=1 -zxf "./${pkg}"
        sudo install -m 0755 ./bin/* /usr/bin/
        if test -d "./autocomplete"; then
            sudo install -m 0644 autocomplete/bash* /usr/share/bash-completion/completions
        fi
    else
        sudo apt install "./${pkg}"
    fi

    cd -

    rm -rf "$tmpdir"
    trap - 0 1 2 15
}

resolve-fqdn ()
{
    local -n argv=$1

    # Try DNS lookup of our IP ...
    local ip=$(dig "${argv[fqdn]}" +short)

    # If DNS unavailable ...
    if test ."$ip" = .''; then

        # Try mDNS ...
        ip=$(dig  -p 5353 @224.0.0.251 "${argv[fqdn]}" +short)

        # If mDNS available ...
        if test ."$ip" != '' && is-dotted-quad "$ip"; then

            # Update /etc/hosts with link-local record
            sudo sed -i -e "\$a #\n# local hosts\n$ip\t${argv[fqdn]}" /etc/hosts
        else

            # Try mDNS lookup of link-local hostname ...
            local ll_hostname=$(hostname -s).local

            ip=$(dig  -p 5353 @224.0.0.251 "$ll_hostname" +short)

            # If mDNS available ...
            if test ."$ip" != '' && is-dotted-quad "$ip"; then

                # Update /etc/hosts with link-local record
                argv[fqdn]=$ll_hostname
                sudo sed -i -e "\$a #\n# local hosts\n$ip\t$ll_hostname" /etc/hosts
            else

                # Use IP 127.0.1.1 (cf. /etc/hosts)
                argv[fqdn]=$(hostname -s).local
            fi
        fi
    fi
}

initialize-step-ca ()
{
    local -n argv=$1

    if ! getent group "${argv[groupname]}" >/dev/null; then
        sudo groupadd "${argv[groupname]}"
    fi

    if ! getent passwd "${argv[username]}" >/dev/null; then
        sudo useradd -g "${argv[groupname]}" -c 'Smallstep CA' -m \
             -s /bin/bash "${argv[username]}"

        # Add $USER to group "${argv[username]}".
        sudo usermod -aG "${argv[username]}" "$USER"

        local homedir=$(getent passwd "${argv[username]}" | cut -d: -f6)

        sudo chmod 750 "$homedir"
    fi


    local tmpfile=$(mktemp "/tmp/${FUNCNAME[0]}.XXXXX")

    trap 'rm -f "$tmpfile"; exit' 0 1 2 15

    sed -e "s|@NAME@|${argv[name]}|" \
        -e "s|@PROVISIONER@|${argv[provisioner]}|" \
        -e "s|@FQDN@|${argv[fqdn]}|" \
        -e "s|@ADDRESS@|${argv[address]}|" \
        -e "s|@PASSWORD_FILE@|${STEPPATH}/secrets/${argv[password_file]}|" \
        -e "s|@PROVISIONER_PASSWORD_FILE@|${STEPPATH}/secrets/${argv[provisioner_password_file]}|" \
        "${argv[template]}" >"$tmpfile"

    chmod 0755 "$tmpfile"
    sudo -u "${argv[username]}" STEPPATH="$STEPPATH" bash -c "$tmpfile"

    rm -f "$tmpfile"
    trap - 0 1 2 15
}

deploy-step-ca-service ()
{
    local -n argv=$1

    # If /var/log is mounted as tmpfs, populate with logdir.
    if test -f /usr/lib/tmpfiles.d/var-log.conf; then
        if ! grep -q "${argv[logdir]}" /usr/lib/tmpfiles.d/var-log.conf; then
            sudo sed -i  -e "\$a d ${argv[logdir]}\t\t0755 ${argv[username]}\t${argv[groupname]}\t\t-" /usr/lib/tmpfiles.d/var-log.conf
        fi
    fi
    sudo install -d -m 0755 -o "${argv[username]}" -g "${argv[groupname]}" \
         /var/log/step

    # Rotate step-ca log.
    local tmpfile=$(mktemp "/tmp/${FUNCNAME[0]}.XXXXX")

    trap 'rm -f "$tmpfile"; exit' 0 1 2 15

    cat >$tmpfile <<EOF
/var/log/step/step-ca.log
{
  rotate 12
  monthly
  compress
  missingok
  notifempty
}
EOF

    sudo install -m 644 "$tmpfile" /etc/logrotate.d/step

    rm -f "$tmpfile"
    trap - 0 1 2 15

    # Install and enable step-ca.service.
    local tmpfile=$(mktemp "/tmp/${FUNCNAME[0]}.XXXXX")

    trap 'rm -f "$tmpfile"; exit' 0 1 2 15
    cat >$tmpfile <<EOF
[Unit]
Description=${argv[name]} Root Certificate Authority
After=syslog.target network.target

[Service]
Type=simple
User=${argv[username]}
Group=${argv[groupname]}
ExecStart=/bin/bash -c "$STEP_CA \$($STEP_CLI path)/config/ca.json --password-file=\$($STEP_CLI path)/secrets/${argv[password_file]} >>${argv[logdir]}/step-ca.log 2>&1"
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    sudo install -m 644 "$tmpfile" /usr/lib/systemd/system/step-ca.service

    rm -f "$tmpfile"
    trap - 0 1 2 15
}

issue-link-local-certificate ()
{
    local -n argv=$1

    sudo -E -u ${argv[username]} provisioner=${argv[provisioner]} \
         STEPPATH=$STEPPATH STEP_CLI=$STEP_CLI bash -s <<'EOF'
years () {
    echo "$(( ($(date -d "$1 years" +%s) - $(date +%s)) / 3600 ))h"
}

declare link_local=$(hostname -s).local
declare token=$(
    $STEP_CLI ca token "$link_local" --issuer "$provisioner" \
    --password-file "$(step path)/secrets/provisioner.pwd"
      )
eval cd ~$USER
$STEP_CLI ca certificate "$link_local" "${link_local}.crt" \
    "${link_local}.key" --not-after "$(years 10)" --token "$token"
EOF
}

issue-fqdn-certificate ()
{
    local -n argv=$1

    sudo -E -u ${argv[username]} fqdn=${argv[fqdn]} \
         provisioner=${argv[provisioner]} \
         STEPPATH=$STEPPATH STEP_CLI=$STEP_CLI bash -s <<'EOF'
years () {
    echo "$(( ($(date -d "$1 years" +%s) - $(date +%s)) / 3600 ))h"
}

declare token=$(
    $STEP_CLI ca token "$fqdn" --issuer "$provisioner" \
    --password-file "$(step path)/secrets/provisioner.pwd"
      )
eval cd ~$USER
$STEP_CLI ca certificate "$fqdn" "${fqdn}.crt" "${fqdn}.key" \
    --not-after "$(years 10)" --token "$token"
EOF
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare opts
    declare status
    declare cli_uri=https://github.com/smallstep/cli
    declare certificates_uri=https://github.com/smallstep/certificates
    declare -r short_opts=a:,f:,g:,h,l:,n:,p:,P:,Q:,t:,u:
    declare -r long_opts=address:,fqdn:,group-name:,help,logdir:,name:,provisioner:,password-file:,provisioner-password-file:,template:,user-name:
    declare -A param=(
        [username]=step
        [groupname]=step
        [provisioner]=step
        [name]=RevoEdge
        [fqdn]=$(
            test ."$(hostname -s)" = ."$(hostname --fqdn)" &&
                echo "$(hostname -s).local" ||
                    echo "$(hostname --fqdn)"
              )
        [address]=:14727
        [template]=init-step-ca.in
        [logdir]=/var/log/step
        [password_file]=step-ca.pwd
        [provisioner_password_file]=provisioner.pwd
    )

    if getent passwd "${param[username]}" >/dev/null; then
        declare homedir=$(
            getent passwd "${param[username]}" |
                awk -F: '{ print $6 }'
                )
        : ${STEPPATH:="${homedir}/.step"}
    else
        : ${STEPPATH:="/home/${param[username]}/.step"}
    fi

    opts=$(
        getopt --name "$script_name" --options "$short_opts"  \
               --longoptions "$long_opts" -- "$@"
        )

    status=$?
    if (( status != 0 )); then
        exit $status
    fi

    eval set -- "$opts"

    while true; do
        case "$1" in
            -a|--address)
                param[address]=$2
                ;;
            -f|--fqdn)
                param[fqdn]=$2
                ;;
            -g|--group-name)
                param[groupname]=$2
                ;;
            -h|--help)
                usage 'param'
                exit 0
                ;;
            -l|--logdir)
                param[logdir]=$2
                ;;
            -n|--name)
                param[name]=$2
                ;;
            -p|--provisioner)
                param[provisioner]=$2
                ;;
            -P|--password-file)
                param[password_file]=$2
                ;;
            -Q|--provisioner-password-file)
                param[provisioner_password_file]=$2
                ;;
            -t|--template)
                param[template]=$2
                ;;
            -u|--username)
                param[username]=$2
                if getent passwd "$2" >/dev/null; then
                    STEPPATH=$(getent passwd "$2" | awk -F: '{ print $6 }')/.step
                else
                    STEPPATH=/home/$2/.step
                fi
                ;;
            --)
                break
                ;;
        esac
        shift 2
    done

    if test ! -f "${param[template]}"; then
        sed -n '/BEGIN patch/,$s/^# //p' "${script_dir}/${script_name}" |
            patch -p0
    fi

    if test ! -x "$STEP_CLI"; then
        fetch-and-install-step-pkg "$cli_uri"
    fi

    if test ! -x "$STEP_CA"; then
        fetch-and-install-step-pkg "$certificates_uri"
    fi

    resolve-fqdn 'param'
    initialize-step-ca 'param'
    deploy-step-ca-service 'param'
    sudo systemctl enable step-ca
    sudo systemctl start step-ca
    sudo systemctl daemon-reload
    issue-link-local-certificate 'param'
    issue-fqdn-certificate 'param'

    sudo systemctl status step-ca
fi

# **** BEGIN patch ****
# --- init-step-ca.in~	1969-12-31 19:00:00.000000000 -0500
# +++ init-step-ca.in	2021-03-18 03:03:36.168245254 -0400
# @@ -0,0 +1,99 @@
# +#!/usr/bin/env bash
# +#
# +# This script initializes the step CA.
# +
# +# Exit immediately on error.
# +set -e -o pipefail
# +
# +# Return uniformly distributed random integer in the range [0,$bound).
# +random-integer ()
# +{
# +    local -i bound=${1:-65536}
# +
# +    local -i bytes=2
# +
# +    # Max value of `od' statement is 65535, so `bc' computes a
# +    # value less than $bound truncated (i.e., rounded down) to an
# +    # integer.
# +    bc <<< "scale=0; $(od -An -l -N$bytes /dev/urandom) * $bound / 65536"
# +}
# +
# +# Return string of uniformly distributed random printable-ASCII chars.
# +# If length is not specified, it defaults to 64.
# +random-string ()
# +{
# +    local -i len=${1:-64}
# +
# +    local -a ascii_chars=( {0..9} {a..z} {A..Z} \! \# \$ % \& \( \) \* + - / \< = \> @ \[ \] ^ _ \{ \| \} \~ )
# +    local -i char_count=${#ascii_chars[*]}
# +    local id
# +
# +    for i in $(seq $len); do
# +        id+="${ascii_chars[$(random-integer $char_count)]}"
# +    done
# +    printf "%s\n" "$id"
# +}
# +
# +init-step-ca ()
# +{
# +    local -n argv=$1
# +
# +    if test -f "${argv[password_file]}"; then
# +        echo "${argv[password_file]}: File exists; Cannot overwrite"
# +    else
# +        install -d -m 0700 "${argv[password_file]%/*}"
# +        install -m 0600 <(random-string) "${argv[password_file]}"
# +    fi
# +
# +    if test -f "${argv[provisioner_password_file]}"; then
# +        echo "${argv[provisioner_password_file]}: File exists; Cannot overwrite"
# +    else
# +        install -d -m 0700 "${argv[provisioner_password_file]%/*}"
# +        install -m 0600 <(random-string) "${argv[provisioner_password_file]}"
# +    fi
# +
# +    step ca init \
# +         --name "${argv[name]}" \
# +         --provisioner "${argv[provisioner]}" \
# +         --dns "${argv[fqdn]}" \
# +         --address "${argv[address]}" \
# +         --password-file "${argv[password_file]}" \
# +         --provisioner-password-file "${argv[provisioner_password_file]}"
# +
# +    # Update $(step path)/config/ca.json to:
# +    #
# +    #    "db": {
# +    #       "type": "badgerV2",
# +    #       "dataSource": "/root/.step/db",
# +    #       "badgerFileLoadingMode": "FileIO"
# +    #    }
# +    #
# +    # See: https://github.com/smallstep/certificates/issues/279#issuecomment-635686362
# +    #
# +    local data_source=$(jq '.db.dataSource' < "$(step path)/config/ca.json")
# +
# +    local tmpfile=$(mktemp "/tmp/${FUNCNAME[0]}.XXXXX")
# +
# +    trap 'rm -rf "$tmpfile"; exit' 0 1 2 15
# +
# +    jq '.db = { "type" : "badgerV2", "dataSource" : '"$data_source"', "badgerFileLoadingMode" : "FileIO" } | .authority += { claims: { maxTLSCertDuration: "175320h", defaultTLSCertDuration: "1h" } }' < "$(step path)/config/ca.json" >"$tmpfile"
# +
# +    mv "$(step path)/config/ca.json"{,~}
# +    install -m 0644 "$tmpfile" "$(step path)/config/ca.json"
# +
# +    rm -f "$tmpfile"
# +    trap - 0 1 2 15
# +}
# +
# +if test ."$0" = ."${BASH_SOURCE[0]}"; then
# +    declare -A param=(
# +        [name]="@NAME@"
# +        [provisioner]="@PROVISIONER@"
# +        [fqdn]="@FQDN@"
# +        [address]="@ADDRESS@"
# +        [password_file]="@PASSWORD_FILE@"
# +        [provisioner_password_file]="@PROVISIONER_PASSWORD_FILE@"
# +    )
# +
# +    init-step-ca 'param'
# +fi
