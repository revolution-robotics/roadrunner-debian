#!/usr/bin/env bash
#
# @(#) bootstrap-smallstep
#
# SYNOPSIS
#     bootstrap-smallstep [user]
#
# DESCRIPTION
#     This script installs in the home directory of a given user:
#        1) asdf-managed version of golang
#        2) the latest version of golang,
#        3) SmallStep CLI and Certificates (via script `install-smallstep').
#     The Smallstep images are deployed to /usr/bin.
#
: ${CHMOD_CMD:='/bin/chmod'}
: ${CAT_CMD:='/bin/cat'}
: ${GIT_CMD:='/usr/bin/git'}
: ${GREP_CMD:='/bin/grep'}
: ${READLINK_CMD:='/bin/readlink'}
: ${RM_CMD:='/bin/rm'}
: ${SUDO_CMD:='/usr/bin/sudo'}

 : ${LOCK:=''}

fetch-asdf ()
{
    if test ."$ASDF_DIR" = .'' -o ! -f "${ASDF_DIR}/asdf.sh"; then
        if command -v asdf >/dev/null; then
            eval $(asdf info | grep ASDF_DIR)
        else
            ASDF_DIR=~/.asdf
        fi
    fi

    export ASDF_DIR

    if test -d "$ASDF_DIR"; then
        $GIT_CMD -C "$ASDF_DIR" pull || return $?
    else
        $GIT_CMD clone https://github.com/asdf-vm/asdf.git "$ASDF_DIR" || return $?
    fi
}

initialize-asdf ()
{
    source "${ASDF_DIR}/asdf.sh" || return $?

    if test ! -f ~/.bashrc || ! $GREP_CMD -q ASDF_DIR ~/.bashrc; then
        echo "Appending to bashrc..." >&2

        $CAT_CMD >>~/.bashrc <<EOF
# Initialize asdf version manager.
export ASDF_DIR=$ASDF_DIR
EOF
        $CAT_CMD >>~/.bashrc <<'EOF'
if test -f "${ASDF_DIR}/asdf.sh"; then
    source "${ASDF_DIR}/asdf.sh"
    source "${ASDF_DIR}/completions/asdf.bash"
fi
EOF
    fi
}

golang-locally-installed ()
{
    if asdf plugin list | $GREP_CMD -q golang; then
        asdf plugin update golang &>/dev/null || return $?
        if asdf which go &>/dev/null; then
            echo true
        else
            echo false
        fi
    else
        asdf plugin add golang &>/dev/null || return $?
        echo false
    fi
}

install-golang ()
{
    echo "Installing golang..."

    local latest=''

    latest=$(asdf latest golang) || return $?
    asdf install golang "$latest" || return $?
    asdf global  golang "$latest" || return $?
    asdf reshim golang || return $?

    GOPATH=$(go env GOPATH) || return $?
    export GOPATH
}

remove-golang ()
{
    echo "Removing golang..."
    $CHMOD_CMD -R +w "${GOPATH}/../../"
    asdf plugin remove golang
    $RM_CMD -rf "${GOPATH}/../../" ~/.cache/go-build
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=$($READLINK_CMD -e $0)

    declare user=${1:-$USER}

    # Run script as given user.
    if test ."$LOCKED" != ."$script"; then
        exec env LOCKED="$script" $SUDO_CMD -i -u "$user" \
             --preserve-env=LOCKED "$script" "$@"
    fi

    fetch-asdf || exit $?
    initialize-asdf || exit $?

    declare have_golang=''

    have_golang=$(golang-locally-installed) || exit $?

    if ! $have_golang; then
        install-golang || exit $?
    fi

    install-smallstep || exit $?

    if ! $have_golang; then
        remove-golang || exit $?
    fi
fi
