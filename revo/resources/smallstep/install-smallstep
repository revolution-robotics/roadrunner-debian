#!/usr/bin/env bash
#
# @(#) install-smallstep
#
# This script installs current versions of Smallstep CLI and CA.
#
# NB: On systems that must build SmallStep from source (e.g., armv7l),
#     see script bootstrap-smallstep.
#
# Supported platforms:
#     Centos/Fedora  (aarch64/x86_64)
#     Debian/Ubuntu  (armv7l/x86_64)
#     Darwin         (arm64/x86_64)
#
: ${APT_CMD:='/usr/bin/apt'}
: ${BASH_CMD:='/bin/bash'}
: ${CAT_CMD:='/bin/cat'}
: ${CHMOD_CMD:='/bin/chmod'}
: ${CHOWN_CMD:='/bin/chown'}
: ${CURL_CMD:='/usr/bin/curl'}
: ${DNF_CMD:='/usr/bin/dnf5'}
: ${FILE_CMD:='/usr/bin/file'}
: ${FIND_CMD:='/usr/bin/find'}
: ${GETENT_CMD:='/usr/bin/getent'}
: ${GIT_CMD:='/usr/bin/git'}
: ${GREP_CMD:='/bin/grep'}
: ${GROUPADD_CMD:='/usr/sbin/groupadd'}
: ${HEAD_CMD:='/usr/bin/head'}
: ${INSTALL_CMD:='/usr/bin/install'}
: ${LS_CMD:='/bin/ls'}
: ${MAKE_CMD:='/usr/bin/gmake'}
: ${MKTEMP_CMD:='/bin/mktemp'}
: ${READLINK_CMD:='/bin/readlink'}
: ${RM_CMD:='/bin/rm'}
: ${SED_CMD:='/bin/sed'}
: ${SORT_CMD:='/usr/bin/sort'}
: ${SYSTEMCTL_CMD:='/bin/systemctl'}
: ${SUDO_CMD:='/usr/bin/sudo'}
: ${TAR_CMD:='/bin/tar'}
: ${TEE_CMD:='/usr/bin/tee'}
: ${UNAME_CMD:='/bin/uname'}
: ${USERADD_CMD:='/usr/sbin/useradd'}

# OS-agnstoic readlink for existent files/directories.
resolve-existing ()
{
    if $READLINK_CMD --version 2>&1 |
            $GREP_CMD -q 'coreutils'; then
        $READLINK_CMD -e -- "$@"
    else
        $READLINK_CMD -f N "$@"
    fi
}

install-smallstep-infrastructure ()
{
    if ! $GETENT_CMD passwd step >/dev/null; then
        $SUDO_CMD $GROUPADD_CMD -r step
        $SUDO_CMD $USERADD_CMD -rm -s "$BASH_CMD" -c 'Smallstep PKI' step
    fi

    if test -d /usr/lib/tmpfiles.d \
            -a ! -f /usr/lib/tmpfiles.d/step-ca.conf; then
        $SUDO_CMD $TEE_CMD /usr/lib/tmpfiles.d/step-ca.conf >/dev/null <<EOF
d /var/log/step 770 step step
EOF
    fi

    if test -d  /usr/lib/systemd/system \
            -a ! -f /usr/lib/systemd/system/step-ca.service; then
        $SUDO_CMD $TEE_CMD /usr/lib/systemd/system/step-ca.service >/dev/null <<'EOF'
[Unit]
Description=Root Certificate Authority
After=network.target

[Service]
Type=simple
User=step
Group=step
ExecStart=/bin/bash -c "/usr/bin/step-ca '$(/usr/bin/step path)/config/ca.json' --password-file='$(/usr/bin/step path)/secrets/step-ca.pwd' >> /var/log/step/step-ca.log 2>&1"
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    fi
}

# Return latest GIT repository tag of the form vX.Y.Z.
get-current-tag ()
{
    local uri=$1
    local allow_rc=$2

    # GIT output format:
    #     f8bc862f1f40000864555374c08f59670f2cf6b9	refs/tags/v0.14.2
    #     3137b01136102d36f7631c0ecbd344bfe60090b3	refs/tags/v0.14.2-rc.1
    #     1b757d26aa177e1ad816b51f74cbfbdd5d69d73a	refs/tags/v0.14.3
    #     ea17bc44bce8630e93a997fd5de41d22a0fa061e	refs/tags/v0.14.4-rc.1
    #
    # After filtering and sorting:
    #     v0.14.2
    #     v0.14.3

    if test ."$allow_rc" != .'false'; then
        $GIT_CMD ls-remote --tags "$uri" |
            $SED_CMD 's;.*refs/tags/;;' |
            $SORT_CMD -rV -k1.2 |
            $HEAD_CMD -1
    else
        $GIT_CMD ls-remote --tags "$uri" |
            $GREP_CMD -Ev -- '-(rc|beta)' |
            $SED_CMD 's;.*refs/tags/;;' |
            $SORT_CMD -rV -k1.2 |
            $HEAD_CMD -1
    fi
}

fetch-smallstep-pkg ()
{
    local uri=$1
    local dl_uri=$2
    local pkg_dir=$3
    local allow_rc=$4

    local ID=''
    local extension=${uri##*/}
    extension=${extension%.git}
    local host=''
    local machine=''
    local pkg=''
    local tag=''

    echo "*** Fetching step-${extension} ***" >&2

    tag=$(get-current-tag "$uri" "$allow_rc") || return $?
    case "$OSTYPE" in
        freebsd*)
            host=freebsd
            ;;
        linux-gnu)
            host=linux
            ;;
        darwin*)
            host=darwin
            ;;
        *)
            host=windows
            ;;
    esac

    local umachine=''

    umachine=$($UNAME_CMD -m) || return $?
    case "$umachine" in
        aarch64|arm64)
            machine=arm64
            ;;
        x86_64)
            machine=amd64
            ;;
        arm7l)
            # armv7l binaries no longer distributed.
            return 0
            ;;
    esac

    if test -f /etc/os-release; then
        source /etc/os-release
    elif test -f /etc/asl.conf; then
        ID=darwin
    else
        ID=windows
    fi

    case "$ID" in
        fedora)
            if test ."$extension" = .'certificates'; then
                pkg=step-ca_linux_${tag#v}_${machine}.tar.gz
            else
                pkg=step-cli_${tag#v}_${machine}.rpm
            fi
            ;;
        ubuntu|debian)
            if test ."$extension" = .'certificates'; then
                pkg=step-ca_${tag#v}_${machine}.deb
            else
                pkg=step-cli_${tag#v}_${machine}.deb
            fi
            ;;
        darwin)
            if test ."$extension" = .'certificates'; then
                pkg=step-ca_${host}_${tag#v}_${machine}.tar.gz
            else
                pkg=step_${host}_${tag#v}_${machine}.tar.gz
            fi
            ;;
        windows)
            if test ."$extension" = .'certificates'; then
                pkg=step-ca_${host}_${tag#v}_${machine}.zip
            else
                pkg=step_${host}_${tag#v}_${machine}.zip
            fi
            ;;
    esac

    $CURL_CMD -o "${pkg_dir}/${pkg}" -sSL "${dl_uri}/${tag}/${pkg}" || return $?

    echo "$pkg"
}

install-build-prerequisites ()
{
    if test -f /etc/os-release; then
        source /etc/os-release
    elif test -f /etc/asl.conf; then
        ID=darwin
    else
        ID=windows
    fi

    case "$ID" in
        ubuntu|debian)
            $SUDO_CMD $APT_CMD update || return $?
            $SUDO_CMD $APT_CMD install -y pkgconf libudev{1,-dev} libusb-1.0-0{,-dev} \
                      libpcsclite{1,-dev} || return $?
            ;;
        darwin|windows)
            if ! pcscd --version &> /dev/null; then
                echo "${script_name}: Don't know how to install libpcsclite library." >&2
                return $?
            fi
            ;;
        *)
            $SUDO_CMD $DNF_CMD install -y pkgconf libusb1{,-devel} pcsc-lite-{devel,libs} \
                      --refresh || retun $?
            ;;
    esac
}
build-and-install-smallstep ()
{
    local -n binary=$1
    local repo=$2
    local go_cmd=$3

    local srcdir=${GOMODCACHE}/github.com/smallstep/${repo}

    echo "Building and installing SmallStep ${repo^^}..." >&2

    if test -d "$srcdir"; then
        $GIT_CMD -C "$srcdir" pull
    else
        $INSTALL_CMD -d -m 0700 "$srcdir" || return $?
        $GIT_CMD clone --single-branch --filter=tree:0 \
                 "https://github.com/smallstep/${repo}" "$srcdir" || return $?
    fi

    $go_cmd -C "${srcdir}/cmd/${binary[$repo]}" build -ldflags='-s -w' || return $?
    $SUDO_CMD $INSTALL_CMD -m 0755 "${srcdir}/cmd/${binary[$repo]}/${binary[$repo]}" \
              /usr/bin/ || return $?
}

deploy-smallstep ()
{
    local pkg=$1
    local dest_dir=$2
    local pkg_dir=$3

    if test ! -f "${pkg_dir}/${pkg}"; then
        echo "${script_name}: $pkg: No such file or directory" >&2
        return
    fi

    case "$pkg" in
        *.tar.gz)
            $TAR_CMD -C "$pkg_dir" --strip-components=1 -zxf "${pkg_dir}/${pkg}" || return $?

            if test -d "${pkg_dir}/bin"; then
                pushd "${pkg_dir}/bin" >/dev/null
            else
                pushd "$pkg_dir" >/dev/null
            fi

            $FIND_CMD . -type f |
                while read candidate; do
                    case $($FILE_CMD "$candidate") in
                        *executable*)
                            $SUDO_CMD $INSTALL_CMD -m 0755 -o root -g root "$candidate" \
                                      "$dest_dir" || return $?
                            ;;
                    esac
                done || { local status=$?; popd >/dev/null; return $status; }
            ;;
        *.deb)
            $SUDO_CMD $CHOWN_CMD -R _apt "${pkg_dir}" || return $?
            $SUDO_CMD $APT_CMD install -y "${pkg_dir}/${pkg}" || return $?
            ;;
        *.rpm)
            $SUDO_CMD $DNF_CMD install -y "${pkg_dir}/${pkg}" || return $?
            ;;
        *.zip)
            # TODO: Define $dest_dir.
            $UNZIP_CMD -d "$dest_dir" "${pkg_dir}/${pkg}" || return $?
            ;;
    esac
}

install-completion ()
{
    local dest_dir=$1

    local step_completion_path=''

    case "$(command -v bash)" in
        /bin/bash)
            step_completion_path=/usr/share/bash-completion/completions/step
            ;;
        *)
            step_completion_path=$(
                resolve-existing $(command -v bash) |
                    $SED_CMD -e 's;/bin.*;/share/bash-completion/completions/step;'
                                ) || return $?
            ;;
    esac

    if test -d "${step_completion_path%/*}" -a ! -f "$step_completion_path"; then
        "${dest_dir}/step" completion bash |
            $SUDO_CMD $TEE_CMD "$step_completion_path" >/dev/null || return $?
    fi
}

maybe-reshim-golang ()
{
    local go_dir=$1

    local asdf_cmd=''

    if asdf_cmd=$(command -v asdf); then
        eval $($asdf_cmd info | $GREP_CMD ASDF_DIR)

        if test ."$go_dir" = ."${ASDF_DIR}/shims"; then
            asdf reshim golang
        fi
    fi
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    set -e -o pipefail
    shopt -s lastpipe

    declare dest_dir=${1:-'/usr/bin'}

    declare script=''

    script=$(resolve-existing "$0") || exit $?

    declare script_name=${script##*/}
    declare go_cmd=''

    if go_cmd=$(command -v go); then
        export GOMODCACHE=$($go_cmd env GOMODCACHE)
    fi

    declare -A repo_binary=(
        [cli]=step
        [certificates]=step-ca
    )
    declare allow_rc=${1:-'false'}
    declare cli_uri=https://github.com/smallstep/cli.git
    declare cli_dl_uri=https://dl.smallstep.com/gh-release/cli/gh-release-header
    declare certificates_uri=https://github.com/smallstep/certificates.git
    declare certificates_dl_uri=https://dl.smallstep.com/gh-release/certificates/gh-release-header
    declare tmpdir=''
    declare extension=''

    install-smallstep-infrastructure || exit $?

    if command -v "$SYSTEMCTL_CMD" >/dev/null \
            && $SYSTEMCTL_CMD is-enabled step-ca &>/dev/null; then
        $SUDO_CMD $SYSTEMCTL_CMD stop step-ca
    fi

    case $(uname -m) in
        aarch64|armv7l)
            if test ! -x "$go_cmd"; then
                echo "${script_name}: go: No such file or directory" >&2
                exit 1
            fi

            install-build-prerequisites || exit $?

            for repo in cli certificates; do
                build-and-install-smallstep repo_binary "$repo" "$go_cmd" || exit $?
            done
            maybe-reshim-golang "${go_cmd%/*}"
            ;;
        amd64|x86_64)
            tmpdir=$($MKTEMP_CMD -d "/tmp/${script_name}.XXXXX") || exit $?

            trap '$RM_CMD -rf "$tmpdir"; exit 1' 0 1 2 15

            for repo in cli certificates; do
                eval uri=\$${repo}_uri
                eval dl_uri=\$${repo}_dl_uri
                pkg=$(fetch-smallstep-pkg "$uri" "$dl_uri" "$tmpdir" "$allow_rc") || exit $?
                deploy-smallstep "$pkg" "$dest_dir" "$tmpdir" || exit $?
            done

            install-completion "$dest_dir"

            $RM_CMD -rf "$tmpdir" || exit $?

            trap - 0 1 2 15
            ;;
    esac


    if command -v "$SYSTEMCTL_CMD" >/dev/null \
               && $SYSTEMCTL_CMD is-enabled step-ca >/dev/null; then
        $SUDO_CMD $SYSTEMCTL_CMD start step-ca || return $?
    fi
fi
