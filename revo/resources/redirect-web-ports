#!/usr/bin/env bash
#
# @(#) redirect-web-ports
#
# Copyright Â© 2020, Revolution Robotics, Inc.
#
# This script is a nftables front-end for redirecting web ports.
#
# Rules are added to and/or removed from the nat table PREROUTING
# chain. The resulting table is updated in nftables config file.
#
# On boot, if nftables config file is loaded by either the nftables or
# firewalld service, redirection should persist until disabled again
# via this script.
#
declare script_name=${0##*/}

: ${AWK:='/usr/bin/awk'}
: ${CAT:='/bin/cat'}
: ${EGREP:='/bin/egrep'}
: ${NFT:='/usr/sbin/nft'}
: ${SED:='/bin/sed'}
: ${TEE:='/usr/bin/tee'}
: ${SUDO:='/usr/bin/sudo'}
: ${SYSTEMCTL:='/bin/systemctl'}

declare -r NFTABLES_CONF=/etc/nftables.conf
declare -r REDIRECT_TABLE=nat
declare -r REDIRECT_CHAIN=PREROUTING

# Suppress this script on system shutdown...
if $SYSTEMCTL list-jobs |
        $EGREP -q '(halt|hibernate|reboot|shutdown|suspend).target.*start'; then
    exit 0
fi

declare -r REDIRECT_TO_DEFAULT=9090

usage ()
{
    $CAT <<EOF
Usage: $script_name enable|disable|status [[dest-port1] dest-port2]

If both DEST-PORT1 and DEST-PORT2 are specified, then port 80
redirects to DEST-PORT1 and port 443 redirects to DEST-PORT2

If either DEST-PORT1 or DEST-PORT2 is not specified, the associated
port redirects to a default port ($REDIRECT_TO_DEFAULT).

If either DEST-PORT1 or DEST-PORT2 is NULL (i.e., ""), the current
state of the associated port is unchanged.
EOF
    exit
}

get_handle ()
{
    local from_port=$1
    local to_port=$2

    $SUDO $NFT -a list table ip $REDIRECT_TABLE 2>/dev/null |
        $AWK '/tcp dport '"$from_port"' redirect to :'"$to_port"'/ { print $NF }'
}

enable_redirect ()
{
    local -n ports=$1

    local key

    # Before adding a rule, ensure that the containing table and chain exist.
    $SUDO $NFT add table ip $REDIRECT_TABLE
    $SUDO $NFT add chain $REDIRECT_TABLE $REDIRECT_CHAIN \
        { type nat hook prerouting priority dstnat\; policy accept\; }

    for key in "${!ports[@]}"; do
        if test ."${ports[$key]}" != .''; then
            $SUDO $NFT add rule $REDIRECT_TABLE $REDIRECT_CHAIN meta l4proto tcp tcp dport "$key" redirect to ":${ports[$key]}"
        fi
    done
}

disable_redirect ()
{
    local -n ports=$1

    local key
    local handle

    for key in "${!ports[@]}"; do
        if test ."${ports[$key]}" != .''; then
            handle=$(get_handle "$key" "${ports[$key]}")
            if test ."$handle" != .''; then
                $NFT delete rule ip $REDIRECT_TABLE $REDIRECT_CHAIN handle $handle
            fi
        fi
    done
}

status_of_redirect ()
{
    local key

    for key in "${!auto_redirect[@]}"; do
        printf "%d => %d\n" $key "${auto_redirect[$key]}"
    done
}

update_nftable ()
{
    local table_name=$1

    $SUDO $SED -i -e "/^table $table_name/,/^}$/d" $NFTABLES_CONF
    $SUDO $NFT list table "ip $REDIRECT_TABLE" |
        $SUDO $TEE -a $NFTABLES_CONF >/dev/null
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then

    declare request=$1
    declare -A user_redirect=( [80]=${2:-"$( (( $# > 1 )) && true || echo "$REDIRECT_TO_DEFAULT" )"} )
    user_redirect+=( [443]=${3:-"$( (( $# > 2 )) && true || echo "$REDIRECT_TO_DEFAULT" )"} )

    declare -A auto_redirect=( [80]=80 [443]=443 )
    declare existing_redirects=$(
        $SUDO $NFT list table ip $REDIRECT_TABLE 2>/dev/null |
            $AWK '/tcp dport (80|443) redirect to/ { sub(/^:/, "", $NF); printf("[%d]=%d\n", $3, $NF) }')

    eval auto_redirect+=( $existing_redirects )

    # $request = '' or $user_redirect != number
    if test ."$request" = .''; then
        usage
    fi

    for key in "${!user_redirect[@]}"; do

        # Not null and not a number
        if [[ ! ."${user_redirect[$key]}" =~ \.[0-9]*$ ]]; then
            usage
        fi
    done

    # $request = status
    if [[ ."$request" =~ \.-{0,2}([sS]) ]]; then
        status_of_redirect

        # $request = enable (synonyms: 1, Add, Yes, True)
    elif [[ ."$request" =~ \.-{0,2}(1|[a|A]|[yY]|[tT]|[eE]) ]]; then

        # First, remove any existing redirects...
        disable_redirect auto_redirect
        enable_redirect user_redirect
        update_nftable "ip $REDIRECT_TABLE"

        # $request = disable (synonyms: 0, Remove, No, False)
    elif [[ ."$request" =~ \.-{0,2}(0|[rR]|[nN]|[fF]|[dD]) ]]; then
        if (( $# > 1 )); then
            disable_redirect user_redirect
        else
            disable_redirect auto_redirect
        fi
        update_nftable "ip $REDIRECT_TABLE"

        # $request = unknown
    else
        usage
    fi
fi
