#!/usr/bin/env bash
#
# @(#) nm-funcs
#
# Copyright Â© 2020, Revolution Robotics, Inc.
#
: ${AWK:='/usr/bin/awk'}
: ${NMCLI:='/usr/bin/nmcli'}
: ${SED:='/bin/sed'}
: ${TR:='/usr/bin/tr'}

# Access points use base address 10.X.0.1 where X is WIFI_CLASS_B or
# ETHERNET_CLASS_B.
declare -ri WIFI_CLASS_B=100
declare -ri ETHERNET_CLASS_B=200

# activate-profile: Activate given NetworkManager profile.
activate-profile ()
{
    local profile=$1
    local toggle=${2:-'false'}

    if is-shared-profile "$profile" && ! internet-accessible; then
        echo "${FUNCNAME[0]}: Warning: No Internet access" >&2
    fi

    # Toggling a connection down and back up provides a workaround for
    # a NetworkManager issue where creating a new profile results in
    # the diagnostic 'no proxy object exists'.
    if ! is-active-profile "$profile" || test ."$toggle" != .'false'; then
        echo "${FUNCNAME[0]}: $profile: Bring up profile" >&2
        if is-wifi-profile "$profile"; then
            $NMCLI radio wifi on
        fi
        $NMCLI connection down "$profile" >/dev/null 2>&1
        $NMCLI connection up "$profile"
    fi
}

# create-ethernet-profile: Create NetworkManager Ethernet profile.
#     $argv[mode] is one of `ap' for access point, `gw' for gateway or 'll'
#     for link-local.
create-ethernet-profile ()
{
    local -n argv=$1

    $NMCLI connection add type ethernet con-name "${argv[profile]}" \
           ifname "${argv[interface]}"

    if test ."${argv[priority]}" != .''; then
        $NMCLI connection modify "${argv[profile]}" \
               connection.autoconnect-priority "${argv[priority]}"
    fi

    if test ."${argv[retries]}" != .''; then
        $NMCLI connection modify "${argv[profile]}" \
               connection.autoconnect-retries "${argv[retries]}"
    fi

    case "${argv[mode]}" in
        ap)
            $NMCLI connection modify "${argv[profile]}" ipv4.method shared
            $NMCLI connection modify "${argv[profile]}" \
                   ipv4.addresses "${argv[ipv4_addr]}"
            ;;
        gw)
            if test ."${argv[ipv4_addr]}" = .''; then
                $NMCLI connection modify "${argv[profile]}" ipv4.method auto
            else
                $NMCLI connection modify "${argv[profile]}" ipv4.method manual
                $NMCLI connection modify "${argv[profile]}" \
                       ipv4.addresses "${argv[ipv4_addr]}"
                if test ."${argv[ipv4_gateway]}" != .''; then
                    $NMCLI connection modify "${argv[profile]}" \
                           ipv4.gateway "${argv[ipv4_gateway]}"
                fi
            fi
            ;;
        ll)
            $NMCLI connection modify "${argv[profile]}" ipv4.method link-local
            ;;
    esac
}

# create-wifi-profile: Create NetworkManager WiFi profile.
#     $argv[mode] is one of `ap' for access point, `gw' for gateway or 'll'
#     for link-local.
create-wifi-profile ()
{
    local -n argv=$1

    $NMCLI connection add type wifi con-name "${argv[profile]}" \
           ifname "${argv[interface]}" ssid "${argv[ssid]}"
    $NMCLI connection modify "${argv[profile]}" wifi-sec.key-mgmt wpa-psk
    $NMCLI connection modify "${argv[profile]}" \
           wifi-sec.psk "${argv[password]}"

    if test ."${argv[priority]}" != .''; then
        $NMCLI connection modify "${argv[profile]}" \
               connection.autoconnect-priority "${argv[priority]}"
    fi

    if test ."${argv[retries]}" != .''; then
        $NMCLI connection modify "${argv[profile]}" \
               connection.autoconnect-retries "${argv[retries]}"
    fi

    case "${argv[mode]}" in
        ap)
            $NMCLI connection modify "${argv[profile]}" ipv4.method shared
            $NMCLI connection modify "${argv[profile]}" \
                   ipv4.addresses "${argv[ipv4_addr]}"
            $NMCLI connection modify "${argv[profile]}" wifi.mode ap
            $NMCLI connection modify "${argv[profile]}" \
                   wifi.band "${argv[wifi_band]}"
            $NMCLI connection modify "${argv[profile]}" wifi-sec.proto rsn
            $NMCLI connection modify "${argv[profile]}" wifi-sec.group ccmp
            $NMCLI connection modify "${argv[profile]}" wifi-sec.pairwise ccmp
            ;;
        gw)
            if test ."${argv[ipv4_addr]}" = .''; then
                $NMCLI connection modify "${argv[profile]}" ipv4.method auto
            else
                $NMCLI connection modify "${argv[profile]}" ipv4.method manual
                $NMCLI connection modify "${argv[profile]}" \
                       ipv4.addresses "${argv[ipv4_addr]}"
                if test ."${argv[ipv4_gateway]}" != .''; then
                    $NMCLI connection modify "${argv[profile]}" \
                           ipv4.gateway "${argv[ipv4_gateway]}"
                fi
            fi
            ;;
        ll)
            $NMCLI connection modify "${argv[profile]}" ipv4.method link-local
            ;;
    esac
}

# disconnect-interface: Bring down any connection on the given interface.
disconnect-interface ()
{
    local interface=$1

    local profile=$(
        $NMCLI --terse connection show --active |
            $AWK -F: '$4 == "'$interface'" { print $1 }'
          )

    if test ."$profile" != .''; then
        echo "${FUNCNAME[0]}: $profile: Shutting down profile" >&2
        $NMCLI connection down "$profile"
    fi
}

# get-active-profiles: Return list of active NetworkManager profiles.
get-active-profiles ()
{
    local interface_type=$1

    $NMCLI --terse --fields NAME,TYPE connection show --active |
        $AWK -F : '$2 ~ /'"$interface_type"'/ { print $1 }'
}

# get-all-interfaces: Return list of interfaces known to NetworkManager.
get-all-interfaces ()
{
    $NMCLI --terse --fields GENERAL.DEVICE device show |
        $SED -e '/^$/d' -e 's/.*://'
}

# get-managed-interfaces: Return list of interfaces managed by NetworkManager.
get-managed-interfaces ()
{
    local interface_type=$1

    local -a devices
    local -a interfaces
    local managed_interface
    local interface
    local device
    local status

    mapfile -t devices < <(get-all-interfaces)

    for device in "${devices[@]}"; do
        device_type=$(
            $NMCLI --terse --fields GENERAL.TYPE device show "$device" |
                $SED -e 's/.*://'
                   )
        if test ."$device_type" = ."$interface_type"; then
            interfaces+=($device)
        fi
    done

    if (( ${#interfaces[*]} == 0 )); then
        echo "${FUNCNAME[0]}: ${interface_type^} interface not found" >&2
        return 1
    fi

    for interface in "${interfaces[@]}"; do
        status=$($NMCLI | $AWK '/^'$interface':/ { print $2 }')
        if test ."$status" = .'unmanaged'; then
            continue
        else
            echo $interface
        fi
    done
}

# interface-profiles: Return profile(s) for given interface.
interface-profiles ()
{
    local interface=$1

    local profile_found=false
    local device
    local profile
    local profiles

    mapfile -t profiles < <(get-active-profiles ethernet)

    for profile in "${profiles[@]}"; do
        device=$(
            $NMCLI --terse --fields GENERAL.DEVICES connection show "$profile" |
                $AWK -F: '{ print $2 }'
            )
        if test ."$device" = ."$interface"; then
            echo "$profile"
            profile_found=true
        fi
    done
    if ! $profile_found; then
        return 1
    fi
}

# internet-accessible: Return true if internet accessible, otherwise false.
internet-accessible ()
{
    local status=$($NMCLI networking connectivity check)

    test ."$status" = .'full'
}

# ipv4-addresses: Return IPv4 address(es) bound to given interface.
ipv4-addresses ()
{
    local interface=$1

    $NMCLI --terse --fields IP4.ADDRESS device show "$interface" |
        $AWK -F: '{ print $2 }'
}

# is-active-profile: Return true if given profile is active, otherwise false.
is-active-profile ()
{
    local profile=$1

    local active_state=$($NMCLI --terse -fields GENERAL.STATE connection show --active "$profile")

    if test ."$active_state" = .''; then
        return 1
    fi
}

# is-connected-interface: Return true if given interface is connected,
#     otherwise false.
is-connected-interface ()
{
    local interface=$1

    local profile=$(
        $NMCLI --terse --fields GENERAL.CONNECTION  device show "$interface" |
            $AWK -F: '{ print $2 }'
          )
    test ."$profile" != .''
}

# is-ethernet-interface: Return true if given interface is ethernet,
#     otherwise false.
is-ethernet-interface ()
{
    local interface=$1

    local status=$(
        $NMCLI --terse --fields GENERAL.TYPE device show "$interface" |
            $AWK -F : '{ print $2 }'
        )
    test ."$status" = .'ethernet'
}

# is-share-profile: Return true if given profile is shared, otherwise false.
is-shared-profile ()
{
    local profile=$1

    local status=$(
        $NMCLI --terse --fields ipv4.method connection show "$profile" |
            $AWK -F : '{ print $2 }'
        )
    test ."$status" = .'shared'
}

# is-wifi-profile: Return true if given profile is wifi, otherwise false.
is-wifi-profile ()
{
    local profile=$1

    local status=$(
        $NMCLI --terse --fields connection.type connection show "$profile" |
            $AWK -F : '{ print $2 }'
        )
    test ."$status" = .'802-11-wireless'
}

# network-accessible: Return true if network accessible, otherwise false.
network-accessible ()
{
    local status=$($NMCLI networking connectivity check)

    test ."$status" != .'none' && test ."$status" != .'unknown'
}

# remove-previous-profile: Remove given profile if it already exists.
remove-previous-profile ()
{
    local con_name=$1

    local -a nm_profile
    local active_state
    local profile

    # Save NetworkManger connection profile names to array `nm_profile'.
    mapfile -t nm_profile < <($NMCLI --terse --fields NAME connection show)
    for profile in "${nm_profile[@]}"; do

        # If profile name conflicts with an existing profile...
        if test ."$profile" = ."$con_name"; then

            # and profile is currently active...
            if is-active-profile "$profile"; then
                echo "${FUNCNAME[0]}: $profile: Shutting down profile" >&2
                $NMCLI connection down "$profile"
            fi

            # Remove existing profile.
            echo "${FUNCNAME[0]}: $profile: Deleting profile" >&2
            $NMCLI connection delete "$profile"
        fi
    done
}

# validate-interface: Verify that given interface exists and is
#     managed by NetworkManager.
validate-interface ()
{
    local interface=$1

    local exists=$($NMCLI --terse device | $AWK -F : '$1 == "'$interface'" { print $1 }')
    local status=$($NMCLI | $AWK '/^'$interface':/ { print $2 }')

    if test ."$exists" = .''; then
        echo "${FUNCNAME[0]}: $interface: Not a valid interface" >&2
        return 1
    elif test ."$status" = .'unmanaged'; then
        echo "${FUNCNAME[0]}: $interface: Unmanaged interface" >&2
        return 2
    fi
}

# validate-ipv4-address: Verify format of given IPv4 address.
validate-ipv4-address ()
{
    local ipv4_addr=$1

    if ! is-ipv4-addr "$ipv4_addr"; then
        echo "${FUNCNAME[0]}: $ipv4_addr: Invalid IPv4 address - expecting dotted-quad/netmask" >&2
        return 1
    fi
}

# validate-ipv4-gateway: Verify format of given dotted quad.
validate-ipv4-gateway ()
{
    local dotted_quad=$1

    if ! is-dotted-quad "$dotted_quad"; then
        echo "${FUNCNAME[0]}: $dotted_quad: Invalid IPv4 address - expecting dotted-quad" >&2
        return 1
    fi
}

# validate-ipv4-network: Verify that network of given IPv4 address doesn't
#     overlap with another interface.
validate-ipv4-network ()
{
    local interface=$1
    local ipv4_addr=$2

    local -a devices
    local device_addr
    local device

    if ! is-ipv4-addr "$ipv4_addr"; then
        echo "${FUNCNAME[0]}: $ipv4_addr: Invalid IPv4 address - expecting dotted-quad/netmask" >&2
        return 1
    fi

    mapfile -t devices < <(get-all-interfaces)

    for device in "${devices[@]}"; do
        test ."$device" != ."$interface" || continue

        device_addr=$(
            $NMCLI --terse --fields IP4.ADDRESS device show "$device" |
                $SED -e 's/.*://'
                   )

        is-ipv4-addr "$device_addr" || continue

        if ! network-exclusive "$ipv4_addr" "$device_addr"; then
            echo "${FUNCNAME[0]}: $ipv4_addr: Address already owned by interface $device" >&2
            return 2
        fi
    done
}

# validate-wifi-band: Verify that band is recognized.
validate-wifi-band ()
{
    local wifi_band=$1

    if ! [[ ."$wifi_band" =~ ^\.(a|bg)$ ]]; then
        echo "${FUNCNAME[0]}: $wifi_band: Band must be either 'a' or 'bg'" >&2
        return 1
    fi
}
