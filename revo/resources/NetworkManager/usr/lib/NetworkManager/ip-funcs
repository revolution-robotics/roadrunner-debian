#!/usr/bin/env bash
#
# @(#) ip-funcs
#
# Copyright Â© 2020, Revolution Robotics, Inc.
#
shopt -s extglob

# Constants and masks for network ops
declare -i ONE_BYTE_MASK=$(( ( 1 << 8 ) - 1 ))
declare -i TWO_BYTE_MASK=$(( ( 1 << 16 ) - 1 ))
declare -i THREE_BYTE_MASK=$(( ( 1 << 24 ) - 1 ))
declare -i FOUR_BYTE_MASK=$(( ( 1 << 32 ) - 1 ))

# is-ipv4-addr: Sanity check IPv4 address. Expected format:
#     dotted-quad/netmask, e.g., 192.168.0.1/24
is-ipv4-addr ()
{
    local ipv4_addr=$1

    local quad=${ipv4_addr%/*}
    local mask=${ipv4_addr#*/}

    is-dotted-quad "$quad" &&
        [[ ."$mask" =~ ^\.(0|[1-9]|[12][0-9]|3[0-2])$ ]]
}

# is-dotted-quad: Sanity check given dotted quad,
#     e.g., 255.255.255.0
is-dotted-quad ()
{
    local quad=$1
    local num

    OIFS=$IFS
    IFS='.'
    set -- $quad
    IFS=$OIFS

    [ $# -eq 4 ] || return 1
    for num; do
        [[ ."$num" =~ ^\.(0|[1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$ ]] || return 1
    done
}

# inet-aton: Convert quad-dotted to 32-bit number,
#     e.g., 10.0.0.1 => 167772161
inet-aton ()
{
    local quad=$1

    local -i ip_no=0
    local -i class_no

    while test ."$quad" != .''; do
        class_no=${quad%%.*}
        ip_no=$(( ip_no << 8 | class_no ))
        quad=${quad/$class_no?(.)}
    done
    echo "$ip_no"
}

# inet-mask-ntoa: Convert netmask size to dotted-quad,
#     e.g., 24 => 255.255.255.0
inet-mask-ntoa ()
{
    local -i mask=$1

    local mask_complement=$(( ( 1 << ( 32 - mask ) ) - 1 ))
    local b4=$(( ( FOUR_BYTE_MASK & ~ mask_complement ) >> 24 ))
    local b3=$(( ( THREE_BYTE_MASK & ~ mask_complement ) >> 16 ))
    local b2=$(( ( TWO_BYTE_MASK & ~ mask_complement ) >> 8 ))
    local b1=$(( ( ONE_BYTE_MASK & ~ mask_complement ) >> 0 ))
    echo "$b4.$b3.$b2.$b1"
}

# inet-ntoa: Convert 32-bit number to dotted-quad,
#     e.g., 167772161 => 10.0.0.1
inet-ntoa ()
{
    local -i ip_no=$1

    local -a quad

    while (( ip_no > 0 )); do
        quad+=( $(( ip_no & ONE_BYTE_MASK )) )
        ip_no=$(( ip_no >> 8 ))
    done
    echo "${quad[3]:=0}.${quad[2]:=0}.${quad[1]:=0}.${quad[0]:=0}"
}

# network-exclusive: Given two IPv4 addresses, check if either is in the
#     other's network. Expected format: dotted-quad/netmask,
#     e.g., 10.0.0.1/24
network-exclusive ()
{
    local ipv4_addr1=$1
    local ipv4_addr2=$2

    quad1=${ipv4_addr1%/*}
    mask1=${ipv4_addr1##*/}
    quad2=${ipv4_addr2%/*}
    mask2=${ipv4_addr2##*/}

    nq1=$(inet-aton "$quad1")
    qm1=$(inet-mask-ntoa "$mask1")
    nm1=$(inet-aton "$qm1")

    nq2=$(inet-aton "$quad2")
    qm2=$(inet-mask-ntoa "$mask2")
    nm2=$(inet-aton "$qm2")

    # addr2 in network1 and addr1 in network2
    if (( (nq1 & nm1) == (nq2 & nm1) )) && (( (nq1 & nm2) == (nq2 & nm2) )); then
        return 1
    # addr2 in network1
    elif (( (nq1 & nm1) == (nq2 & nm1) )); then
        return 2
    # addr1 in network2
    elif (( (nq1 & nm2) == (nq2 & nm2) )); then
        return 3
    fi
}
