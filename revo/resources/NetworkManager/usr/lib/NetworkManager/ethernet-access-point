#!/usr/bin/env bash
#
# @(#) ethernet-access-point
#
# Copyright Â© 2020, Revolution Robotics, Inc.
#
# This script creates and activates a NetworkManger Ethernet access point
# profile. It's assumed that there's a separate network interface with
# Internet access.
#
script_name=${0##*/}
script_dir=${0%/*}

: ${CAT:='/bin/cat'}

source "${script_dir}/ip-funcs"
source "${script_dir}/nm-funcs"

declare -r DEFAULT_IPV4_ADDR=10.${ETHERNET_CLASS_B}.0.1/24

declare -A param=(
    [mode]=ap
    [ipv4_addr]=$DEFAULT_IPV4_ADDR
)

usage ()
{
    $CAT <<EOF
Usage: $script_name -p PROFILE -i INTERFACE OPTIONS
where OPTIONS are:
  -h|--help      Display help, then exit
  -p|--profile=PROFILE
                 Set connection profile name to PROFILE (e.g., eth0-ap)
  -i|--interface=INTERFACE
                 Set network interface to INTERFACE (e.g., eth0)
  -a|--address=IPv4_ADDR
                 Set IPv4 address/netmask to IPv4_ADDR
                 (default: ${param[ipv4_addr]})
  -o|--priority=PRIORITY
                 Set connection priority to PRIORITY
  -r|--retries=RETRIES
                 Set connection retries to RETRIES
EOF
}

declare opts
declare status
declare -r short_opts=a:,h,i:,o:,p:,r:
declare -r long_opts=address:,help,interface:,priority:,profile:,retries:

opts=$(
    getopt --name "$script_name" --options "$short_opts"  \
           --longoptions "$long_opts" -- "$@"
    )

status=$?
if (( status != 0 )); then
    exit $status
fi

eval set -- "$opts"

while true; do
    case "$1" in
        -a|--address)
            param[ipv4_addr]=$2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -i|--interface)
            param[interface]=$2
            ;;
        -o|--priority)
            param[priority]=$2
            ;;
        -p|--profile)
            param[profile]=$2
            ;;
        -r|--retries)
            param[retries]=$2
            ;;
        --)
            break
            ;;
    esac
    shift 2
done

if test ."${param[profile]}" = .''; then
    echo "$script_name: ${param[profile]}: Not a valid profile name" >&2
    exit 1
fi

validate-interface "${param[interface]}" || exit $?
validate-ipv4-network "${param[interface]}" "${param[ipv4_addr]}" || exit $?

disconnect-interface "${param[interface]}"
remove-previous-profile "${param[profile]}"
create-ethernet-profile 'param'
activate-profile "${param[profile]}"
